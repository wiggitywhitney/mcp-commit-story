# Task ID: 7
# Title: Implement CLI Interface
# Status: pending
# Dependencies: 2, 3, 5
# Priority: high
# Description: Create the command-line interface using Click to provide setup functionality for the journal.
# Details:
Implement the CLI interface in `src/mcp_journal/cli.py` with the following features:

1. CLI setup:
```python
import click

@click.group()
def cli():
    """MCP Journal - Engineering journal for Git repositories"""
    pass
```

2. Setup command implementations:
```python
@cli.command()
@click.option("--debug", is_flag=True, help="Show debug information")
def journal_init(debug):
    """Initialize journal in current repository"""
    # Implementation

@cli.command()
@click.option("--debug", is_flag=True, help="Show debug information")
def install_hook(debug):
    """Install Git hook to connect with MCP server"""
    # Implementation
```

3. Global options:
```python
@click.option("--config", help="Override config file location")
@click.option("--dry-run", is_flag=True, help="Preview operations without writing files")
@click.option("--verbose", is_flag=True, help="Detailed output for debugging")
```

4. Main entry point:
```python
def main():
    """Main entry point for CLI"""
    try:
        cli()
    except Exception as e:
        click.echo(f"Error: {e}", err=True)
        sys.exit(1)

if __name__ == "__main__":
    main()
```

Note: This CLI is focused ONLY on setup commands (journal-init, install-hook). All operational tasks (journal entry creation, reflection addition, summarization, etc.) are handled by the MCP server and AI agents, not through this CLI. Refer to the updated documentation for details on how these operational tasks are managed.

# Test Strategy:
1. Unit tests for setup CLI commands (journal-init, install-hook)
2. Tests for command options and arguments
3. Tests for error handling
4. Tests for global options
5. Integration tests for setup commands
6. Tests for exit codes and error messages
