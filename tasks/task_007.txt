# Task ID: 7
# Title: Implement CLI Interface
# Status: pending
# Dependencies: 2, 3, 5
# Priority: high
# Description: Create the command-line interface using Click to provide access to all journal operations.
# Details:
Implement the CLI interface in `src/mcp_journal/cli.py` with the following features:

1. CLI setup:
```python
import click

@click.group()
def cli():
    """MCP Journal - Engineering journal for Git repositories"""
    pass
```

2. Command implementations:
```python
@cli.command()
@click.option("--debug", is_flag=True, help="Show debug information")
def init(debug):
    """Initialize journal in current repository"""
    # Implementation

@cli.command()
@click.option("--debug", is_flag=True, help="Show debug information")
def new_entry(debug):
    """Create journal entry for current commit"""
    # Implementation

@cli.command()
@click.argument("text")
def add_reflection(text):
    """Add manual reflection to today's journal"""
    # Implementation

@cli.command()
@click.option("--week", is_flag=True, help="Summarize most recent week")
@click.option("--month", is_flag=True, help="Summarize most recent month")
@click.option("--day", "--date", help="Summarize specific day (YYYY-MM-DD)")
@click.option("--range", help="Summarize date range (YYYY-MM-DD:YYYY-MM-DD)")
@click.option("--debug", is_flag=True, help="Show debug information")
def summarize(week, month, date, range, debug):
    """Generate summary for specified period"""
    # Implementation

# Additional commands for other operations
```

3. Global options:
```python
@click.option("--config", help="Override config file location")
@click.option("--dry-run", is_flag=True, help="Preview operations without writing files")
@click.option("--verbose", is_flag=True, help="Detailed output for debugging")
```

4. Main entry point:
```python
def main():
    """Main entry point for CLI"""
    try:
        cli()
    except Exception as e:
        click.echo(f"Error: {e}", err=True)
        sys.exit(1)

if __name__ == "__main__":
    main()
```

# Test Strategy:
1. Unit tests for each CLI command
2. Tests for command options and arguments
3. Tests for error handling
4. Tests for global options
5. Integration tests for CLI commands
6. Tests for exit codes and error messages
