# Task ID: 13
# Title: Implement Backfill Functionality
# Status: pending
# Dependencies: 7
# Priority: medium
# Description: Create the functionality to detect and generate journal entries for missed commits.
# Details:
Implement backfill functionality in both the MCP server and CLI with the following features:

1. Missed commit detection:
```python
def get_missed_commits(repo, config):
    """Get commits that don't have journal entries"""
    # Get journal directory
    journal_path = Path(config["journal"]["path"])
    
    # Get all commits
    commits = list(repo.iter_commits())
    
    # Get all journal files
    journal_files = list(journal_path.glob("daily/*.md"))
    
    # Extract commit hashes from journal files
    journal_commits = set()
    for file_path in journal_files:
        with open(file_path, "r") as f:
            content = f.read()
            # Extract commit hashes using regex
            # Implementation
    
    # Find commits not in journal
    missed_commits = []
    for commit in commits:
        if commit.hexsha not in journal_commits and not is_journal_only_commit(commit, config["journal"]["path"]):
            missed_commits.append(commit)
    
    return missed_commits
```

2. Backfill processing:
```python
def process_backfill(commits, config, debug=False):
    """Process backfill for missed commits"""
    results = []
    
    # Sort commits by date
    commits.sort(key=lambda c: c.committed_date)
    
    for commit in commits:
        # Generate entry
        entry = generate_journal_entry(commit, config, debug)
        if not entry:
            continue
        
        # Mark as backfilled
        entry.is_backfilled = True
        
        # Save entry
        file_path = save_journal_entry(entry, config)
        
        results.append({
            "commit": commit.hexsha,
            "file_path": str(file_path)
        })
    
    return results
```

3. MCP handler implementation:
```python
@trace_operation("journal_backfill")
async def handle_backfill(request):
    """Handle journal/backfill operation"""
    debug = request.get("debug", False)
    
    # Load config
    config = load_config()
    
    # Get repo
    repo = get_repo()
    
    # Get missed commits
    missed_commits = get_missed_commits(repo, config)
    if not missed_commits:
        return {"status": "success", "message": "No missed commits found"}
    
    # Process backfill
    results = process_backfill(missed_commits, config, debug)
    
    return {
        "status": "success",
        "count": len(results),
        "entries": results
    }
```

4. CLI command implementation:
```python
@cli.command()
@click.option("--debug", is_flag=True, help="Show debug information")
def backfill(debug):
    """Check for missed commits and create entries"""
    try:
        # Load config
        config = load_config()
        
        # Get repo
        repo = get_repo()
        
        # Get missed commits
        missed_commits = get_missed_commits(repo, config)
        if not missed_commits:
            click.echo("No missed commits found")
            return
        
        # Process backfill
        results = process_backfill(missed_commits, config, debug)
        
        click.echo(f"Created {len(results)} journal entries for missed commits")
        for result in results:
            click.echo(f"  - {result['commit'][:8]}: {result['file_path']}")
    except Exception as e:
        if debug:
            click.echo(f"Error: {e}")
            traceback.print_exc()
        else:
            click.echo(f"Error: {e}")
```

# Test Strategy:
1. Unit tests for missed commit detection
2. Tests for backfill processing
3. Tests for MCP handler implementation
4. Tests for CLI command implementation
5. Tests for handling journal-only commits
6. Tests for chronological ordering of backfilled entries
7. Integration tests for full backfill flow
