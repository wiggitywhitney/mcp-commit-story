# Task ID: 50
# Title: Create Standalone Journal Generator
# Status: in-progress
# Dependencies: None
# Priority: high
# Description: Convert git_hook_worker.py from signal-based to direct journal generation using existing infrastructure.
# Details:
## Requirements

### 1. Replace Signal Creation with Direct Journal Calls
- **Current:** 3 `create_tool_signal_safe()` calls at lines 684, 700, 714
- **Change to:** Call `journal_workflow.generate_journal_entry()` directly
- **Preserve:** All existing error handling and telemetry patterns

### 2. Bridge Git Repository Data
- **Current:** `main()` receives repo path string
- **Needed:** Convert to commit object + config for `journal_workflow.generate_journal_entry()`
- Use existing git_utils.py for commit object lookup
- Use existing config.py for configuration loading

### 3. Maintain Graceful Operation
- Preserve "never block git operations" principle
- Keep all existing logging and telemetry patterns
- Add fallback handling if journal generation fails
- Use existing `*_safe()` wrapper pattern for new direct calls

## Verification Against Codebase

✅ **journal_workflow.generate_journal_entry() exists** - line 20 in journal_workflow.py  
✅ **Context collection ready** - context_collection.py, context_types.py complete  
✅ **AI generators exist** - journal_generate.py (standalone via Task 64)  
✅ **Git utilities available** - git_utils.py for commit object conversion  
✅ **Signal locations identified** - lines 684, 700, 714 in git_hook_worker.py  
✅ **Configuration system exists** - config.py for loading journal settings  
✅ **Error handling patterns established** - existing `*_safe()` wrapper functions  

**Missing:** CLI argument parsing (needs to be added to main())

## Dependencies

- **Task 64** must be complete (AI generator standalone operation)
- **Tasks 63, 65** as specified in original dependencies

## Design Decisions Made

1. **CLI Structure**: No CLI needed - focus only on replacing signals with direct calls
2. **Directory Detection**: Use current working directory (consistent with git_utils patterns)  
3. **Scope**: Remove CLI scope creep - manual journal generation belongs in MCP tools

## Key Dependencies and Notes

- **Task 64** must be complete before 50.2 (AI generators must be standalone)
- Each subtask includes comprehensive telemetry implementation
- All subtasks follow TDD approach with tests before implementation
- Maintains "never block git operations" principle throughout
- Preserves all existing error handling patterns
- Git hook functionality remains exactly the same - just removes signal indirection

## Scope

This is **not** building new functionality. It's removing signal-based indirection from the existing git hook worker while maintaining exactly the same git hook behavior.

The core change: `create_tool_signal_safe()` → `journal_workflow.generate_journal_entry()` direct calls.

# Test Strategy:
# Testing Strategy for Direct Git Hook Journal Generation

## 1. Unit Tests

### Test Direct Journal Generation Function
```python
def test_generate_journal_entry_safe():
    # Mock dependencies
    with patch('git_utils.get_commit_from_hash') as mock_get_commit, \
         patch('config.load_config') as mock_load_config, \
         patch('journal_workflow.generate_journal_entry') as mock_generate, \
         patch('logging_utils.log_telemetry') as mock_telemetry:
        
        # Configure mocks
        mock_commit = MagicMock()
        mock_commit.hexsha = 'test123'
        mock_get_commit.return_value = mock_commit
        mock_load_config.return_value = {'journal_dir': '/tmp'}
        mock_generate.return_value = True
        
        # Call the function
        result = generate_journal_entry_safe()
        
        # Verify dependencies were called correctly
        mock_get_commit.assert_called_once()
        mock_load_config.assert_called_once()
        mock_generate.assert_called_once_with(mock_commit, {'journal_dir': '/tmp'})
        mock_telemetry.assert_called_once()
        
        # Verify result
        assert result is True

def test_generate_journal_entry_safe_with_error():
    # Mock dependencies with error
    with patch('git_utils.get_commit_from_hash') as mock_get_commit, \
         patch('logging_utils.log_error') as mock_log_error:
        
        # Configure mock to raise exception
        mock_get_commit.side_effect = Exception('Test error')
        
        # Call the function
        result = generate_journal_entry_safe()
        
        # Verify error was logged
        mock_log_error.assert_called_once()
        assert 'Test error' in mock_log_error.call_args[0][0]
        
        # Verify result
        assert result is False
```

### Test Git Hook Processing Functions
```python
def test_process_post_commit_hook():
    # Mock dependencies
    with patch('git_hook_worker.generate_journal_entry_safe') as mock_generate:
        # Configure mock
        mock_generate.return_value = True
        
        # Call the function
        result = process_post_commit_hook('/test/repo')
        
        # Verify dependencies were called correctly
        mock_generate.assert_called_once_with(hook_type='post-commit')
        
        # Verify result
        assert result is True

def test_process_post_commit_hook_with_error():
    # Mock dependencies with error
    with patch('git_hook_worker.generate_journal_entry_safe') as mock_generate, \
         patch('logging_utils.log_error') as mock_log_error:
        
        # Configure mock to raise exception
        mock_generate.side_effect = Exception('Test error')
        
        # Call the function
        result = process_post_commit_hook('/test/repo')
        
        # Verify error was logged
        mock_log_error.assert_called_once()
        
        # Verify result
        assert result is False
```

## 2. Integration Tests

```python
def test_integration_direct_journal_generation():
    # Create a real git repository
    with temp_git_repo() as repo_path:
        # Set up the repo with test files
        setup_test_repo(repo_path)
        
        # Make a commit
        commit_hash = make_test_commit(repo_path)
        
        # Run the direct journal generation
        with working_directory(repo_path):
            result = generate_journal_entry_safe(commit_hash=commit_hash)
        
        # Verify result
        assert result is True
        
        # Verify journal file was created
        config = load_config()
        journal_path = os.path.join(config['journal_dir'], get_journal_filename())
        assert os.path.exists(journal_path)
        
        # Verify journal content
        with open(journal_path, 'r') as f:
            content = f.read()
            assert commit_hash in content
            assert 'Summary' in content

def test_integration_post_commit_hook():
    # Create a real git repository
    with temp_git_repo() as repo_path:
        # Set up the repo with test files
        setup_test_repo(repo_path)
        
        # Run the post-commit hook directly
        with working_directory(repo_path):
            result = process_post_commit_hook(repo_path)
        
        # Verify result
        assert result is True
        
        # Verify journal file was created
        config = load_config()
        journal_path = os.path.join(config['journal_dir'], get_journal_filename())
        assert os.path.exists(journal_path)
```

## 3. End-to-End Tests

```python
def test_end_to_end_with_git_hook():
    # Create a test git repository
    with temp_git_repo() as repo_path:
        # Install git hooks
        with working_directory(repo_path):
            install_git_hooks()
        
        # Create test files and make a commit
        create_test_file(repo_path, 'test.py', 'print("Hello world")')
        with working_directory(repo_path):
            subprocess.run(['git', 'add', 'test.py'])
            subprocess.run(['git', 'commit', '-m', 'Test commit'])
        
        # Wait for hook to complete
        time.sleep(2)
        
        # Verify journal file was created
        config = load_config()
        journal_path = os.path.join(config['journal_dir'], get_journal_filename())
        assert os.path.exists(journal_path)
```

## 4. Manual Testing Checklist

1. Make a small code change and commit it
2. Verify that a journal entry was generated in the journal directory
3. Check that the journal entry contains:
   - Commit metadata (hash, author, timestamp)
   - Summary section with meaningful content
4. Test with a larger commit to verify performance
5. Verify that git operations are not blocked by journal generation
6. Check logs to ensure telemetry is being recorded correctly

# Subtasks:
## 1. Create Direct Journal Generation Wrapper [in-progress]
### Dependencies: None
### Description: Implement a safe wrapper function that converts git_hook_worker's repo path input into the commit object and config required by journal_workflow.generate_journal_entry().
### Details:
#### TDD Steps:

1. **WRITE TESTS FIRST**
   - Create `tests/unit/test_git_hook_worker_journal_integration.py`
   - Test `generate_journal_entry_safe()` function
   - Test cases: successful generation, git repo detection failure, config loading failure, journal generation failure, None inputs
   - Mock `journal_workflow.generate_journal_entry()` to test integration
   - Test telemetry recording for both success and failure cases
   - **RUN TESTS - VERIFY THEY FAIL**

2. **IMPLEMENT FUNCTIONALITY**
   - Implement `generate_journal_entry_safe()` in `src/mcp_commit_story/git_hook_worker.py`
   - Convert repo path string to commit object using existing git_utils
   - Load configuration using existing config utilities
   - Call `journal_workflow.generate_journal_entry()` with proper parameters
   - Follow existing `*_safe()` wrapper patterns for error handling
   - Add comprehensive telemetry for generation attempts, success/failure rates, and timing
   - **RUN TESTS - VERIFY THEY PASS**

3. **DOCUMENT AND COMPLETE**
   - Add detailed docstring explaining the wrapper's role in bridging git hook and journal workflow
   - Document error handling approach and telemetry patterns
   - **Run the entire test suite and make sure all tests are passing**
   - Double check all subtask requirements are met before marking this subtask as complete
   - **MARK COMPLETE**

## 2. Replace Signal Creation with Direct Journal Calls [pending]
### Dependencies: None
### Description: Remove the 3 create_tool_signal_safe() calls in git_hook_worker.py and replace them with direct calls to generate_journal_entry_safe(), eliminating the signal-based indirection.
### Details:
#### TDD Steps:

1. **WRITE TESTS FIRST**
   - Extend `tests/unit/test_git_hook_worker_journal_integration.py`
   - Test that `main()` calls `generate_journal_entry_safe()` instead of `create_tool_signal_safe()`
   - Test cases: normal git hook operation, daily summary trigger, signal creation disabled
   - Mock all dependencies to verify the call flow
   - Test telemetry shows direct generation instead of signal creation
   - **RUN TESTS - VERIFY THEY FAIL**

2. **IMPLEMENT FUNCTIONALITY**
   - Replace the 3 `create_tool_signal_safe()` calls at lines 684, 700, 714 in `git_hook_worker.py`
   - Replace with calls to `generate_journal_entry_safe()` using appropriate parameters
   - Preserve all existing error handling and logging patterns
   - Update telemetry to reflect direct generation vs signal-based generation
   - Remove unused signal creation imports if no longer needed
   - **RUN TESTS - VERIFY THEY PASS**

3. **DOCUMENT AND COMPLETE**
   - Update function docstrings to reflect the direct generation approach
   - Remove any references to signal creation in comments
   - **Run the entire test suite and make sure all tests are passing**
   - Double check all subtask requirements are met before marking this subtask as complete
   - **MARK COMPLETE**

## 3. Integration Testing and Git Hook Worker Cleanup [pending]
### Dependencies: None
### Description: Verify the complete standalone operation works end-to-end and remove the replaced signal creation code from git_hook_worker.py (comprehensive signal cleanup is handled by Task 54).
### Details:
#### Steps:

1. **RUN FULL TEST SUITE**
   - Run entire test suite to ensure nothing broke after signal replacement
   - Document any test failures and fix them
   - Pay special attention to:
     - Git hook worker tests
     - Journal generation workflow tests  
     - Any tests that interact with signal creation
   - **VERIFY ALL TESTS PASS**

2. **VERIFY END-TO-END FUNCTIONALITY**
   - Test that journal generation works end-to-end with direct calls
   - Verify that git hook integration still functions correctly
   - Test error scenarios and graceful degradation
   - Confirm that no signals are created during operation
   - Use existing test infrastructure, don't create new test files

3. **CLEAN UP REPLACED CODE IN GIT_HOOK_WORKER.PY**
   - Remove the old `create_tool_signal_safe()` function if no longer used elsewhere
   - Remove unused signal-related imports from `git_hook_worker.py` (e.g., signal_management imports)
   - Remove any signal creation constants or configuration specific to git_hook_worker.py
   - **Note:** Comprehensive signal architecture cleanup is handled by Task 54

4. **DOCUMENT AND COMPLETE**
   - Update git_hook_worker.py module documentation to reflect direct generation approach
   - Document integration verification results
   - **Run the entire test suite one final time**
   - Update this task document to reflect implementation completion
   - Double check all subtask requirements are met before marking this subtask as complete
   - **MARK COMPLETE**

## 4. Telemetry Verification After Signal Replacement [pending]
### Dependencies: None
### Description: Extend existing telemetry integration tests to verify that the signal-to-direct-call replacement preserved all telemetry functionality, decorators, and performance characteristics.
### Details:
#### Steps:

1. **EXTEND EXISTING TELEMETRY TESTS**
   - Open `tests/integration/test_telemetry_validation_integration.py`
   - Add new test class: `TestDirectJournalGenerationTelemetry`
   - Import existing test infrastructure:
     ```python
     from tests.integration.test_telemetry_validation_integration import (
         TelemetryCollector,
         assert_operation_traced,
         assert_trace_continuity,
         assert_performance_within_bounds,
         assert_error_telemetry
     )
     ```

2. **VERIFY DECORATOR PRESERVATION ON DIRECT CALLS**
   - Test that `generate_journal_entry_safe()` retains `@trace_git_operation` decorator
   - Verify `journal_workflow.generate_journal_entry()` maintains its telemetry
   - Use `assert_operation_traced()` with operation names "git_hook.journal_generation" and "journal.generate_entry"
   - Test both successful and error scenarios

3. **VALIDATE GIT HOOK SPECIFIC TELEMETRY PATTERNS**
   - Test that git hook telemetry patterns are preserved:
     - `git_hook.journal_generation_duration_seconds` metrics
     - `git_hook.operations_total` counters
     - Error categories: `journal_generation_failed`, `git_repo_detection_failed`, etc.
   - Use existing assertion helpers with git hook specific patterns

4. **VERIFY TRACE CONTINUITY THROUGH DIRECT CALLS**
   - Use `assert_trace_continuity()` to verify:
     - Git hook spans have journal generation child spans
     - Direct calls don't break parent-child relationships
     - Trace context propagates correctly through new call path
     - No telemetry gaps between git hook and journal workflow

5. **PERFORMANCE REGRESSION TESTING**
   - Use `assert_performance_within_bounds()` with correct thresholds:
     - Individual operations: ≤5% overhead
     - Git hook operations: ≤10% overhead
   - Compare direct call performance vs previous signal-based approach
   - Document any performance changes

6. **COMPREHENSIVE ERROR TELEMETRY TESTING**
   - Use `assert_error_telemetry()` to test direct call error scenarios:
     - Git repository detection failures
     - Configuration loading failures  
     - Journal generation failures
     - Commit object creation failures
   - Force each error type and verify proper telemetry capture

7. **FINAL VERIFICATION**
   - Run extended telemetry tests multiple times for consistency
   - Run existing telemetry tests to ensure no regressions
   - Verify coverage of all direct call paths
   - **MARK COMPLETE**

## 5. Documentation Updates [pending]
### Dependencies: None
### Description: Update all documentation to reflect the direct journal generation approach, writing for future developers with zero project knowledge and ensuring all code examples use correct call patterns.
### Details:
#### Steps:

1. **UPDATE GIT-HOOK-WORKER.MD**
   - Update module documentation to describe direct journal generation approach
   - Add code examples showing `generate_journal_entry_safe()` usage
   - Remove any references to signal-based architecture
   - Write as if direct calls have always been the approach

2. **UPDATE ARCHITECTURE.MD**
   - In the "Git Hook Integration" section, update to describe direct call flow
   - Update any diagrams or flow descriptions to show:
     ```
     Git Hook → git_hook_worker.py → journal_workflow.generate_journal_entry()
     ```
   - Remove signal-based flow references

3. **UPDATE IMPLEMENTATION-GUIDE.MD**
   - In the "Git Hook Setup" section, describe the current direct approach
   - Update any code examples that show git hook implementation
   - Ensure guidance reflects the streamlined direct call pattern

4. **COMPREHENSIVE DOCUMENTATION SEARCH**
   - Search all .md files for these patterns and update them:
     - `create_tool_signal_safe()`
     - Signal-based journal generation references
     - Git hook signal creation examples
   - Files to specifically check:
     - `git-integration.md`
     - `testing_standards.md`
     - Any example code blocks in all documentation files

5. **UPDATE README.MD IN DOCS FOLDER**
   - If it describes git hook integration, update to current direct approach
   - Ensure quick navigation links still work
   - Write as if this approach has always existed

6. **FINAL VERIFICATION**
   - Do a comprehensive search across all docs for:
     - `create_tool_signal_safe`
     - Signal-based references
     - Any remaining historical references
   - Verify all code examples would actually work with current implementation
   - Ensure NO historical references remain (no "previously", "after changes", etc.)
   - Verify a new developer could understand the system without knowing signal history
   - **MARK COMPLETE**

