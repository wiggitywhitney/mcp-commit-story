# Task ID: 10
# Title: Implement Manual Reflection Addition
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create the functionality to add manual reflections to journal entries through the MCP server and AI agent, ensuring they are prioritized in summaries. Begin with a research phase to determine the optimal implementation approach.
# Details:
Before implementation, conduct research to determine whether manual reflections would be better implemented as an MCP prompt, an MCP tool, or both.

Research considerations:
1. UX/ease of use differences between prompts vs tools for manual reflection addition
2. Technical implementation complexity for each approach
3. Whether both options should be available or just one
4. Integration with AI agents and workflow patterns
5. Alignment with MCP-first architecture principles

After research is complete and decisions are made, implement manual reflection addition in the MCP server with the following features:

1. Reflection formatting:
```python
def format_reflection(text):
    """Format a manual reflection with timestamp"""
    timestamp = datetime.now().strftime("%I:%M %p")
    return f"## {timestamp} â€” Manual Reflection\n\n{text}\n"
```

2. File appending (using ensure_journal_directory utility):
```python
def add_reflection_to_journal(text, config):
    """Add a reflection to today's journal"""
    date = datetime.now().strftime("%Y-%m-%d")
    journal_path = Path(config["journal"]["path"])
    
    file_path = journal_path / "daily" / f"{date}.md"
    
    # Use ensure_journal_directory utility to create directories if needed
    ensure_journal_directory(file_path)
    
    # Create file if needed
    if not file_path.exists():
        with open(file_path, "w") as f:
            f.write(f"# Journal for {date}\n")
    
    # Format and append reflection
    reflection = format_reflection(text)
    with open(file_path, "a") as f:
        f.write("\n\n" + reflection)
    
    return file_path
```

3. MCP handler implementation:
```python
@trace_operation("journal_add_reflection")
async def handle_add_reflection(request):
    """Handle journal/add-reflection operation"""
    text = request.get("text")
    if not text:
        return {"status": "error", "error": "No reflection text provided"}
    
    # Load config
    config = load_config()
    
    # Add reflection
    file_path = add_reflection_to_journal(text, config)
    
    return {
        "status": "success",
        "file_path": str(file_path),
        "reflection": text
    }
```

4. Ensure journal directory utility:
```python
def ensure_journal_directory(file_path):
    """Ensure directories exist for the given file path, creating them on-demand if needed"""
    directory = file_path.parent
    directory.mkdir(parents=True, exist_ok=True)
    return directory
```

## Acceptance Criteria
- Research phase completed with clear decisions on implementation approach
- All file-writing functions (including add_reflection_to_journal) must call ensure_journal_directory(file_path) before writing
- No code should create directories upfront
- Implementation must follow the on-demand directory creation pattern as documented in docs/on-demand-directory-pattern.md
- Reflection addition is available as an MCP operation only, not a CLI command
- Manual reflection addition is handled exclusively by the MCP server and AI agent
- CLI functionality is limited to setup commands (journal-init, install-hook) as per updated documentation

# Test Strategy:
1. Unit tests for reflection formatting
2. Tests for file appending
3. Tests for MCP handler implementation
4. Tests for creating new journal file if needed
5. Tests for appending to existing journal file
6. Integration tests for full reflection addition flow
7. Tests for ensure_journal_directory utility
8. Tests for on-demand directory creation when directories don't exist
9. Tests to verify proper directory structure is created
10. Tests to verify compliance with on-demand directory creation pattern
11. Tests to ensure no directories are created until file operations are performed
12. Tests to verify ensure_journal_directory is called before any file writing operations
13. Tests following patterns documented in docs/on-demand-directory-pattern.md
14. Tests to verify reflection addition is properly exposed as an MCP operation
15. Tests to verify AI agent can successfully add reflections via the MCP operation
16. Tests to verify no CLI commands exist for operational functions like adding reflections
17. Tests to verify CLI is limited to setup commands (journal-init, install-hook) as specified
18. Tests for the chosen implementation approach (prompt vs. tool) based on research findings

# Subtasks:
## 10.1. Create ensure_journal_directory utility function [pending]
### Dependencies: None
### Description: Implement the ensure_journal_directory utility function that creates journal directories on-demand following the new pattern.
### Details:


## 10.2. Update add_reflection_to_journal to use ensure_journal_directory [pending]
### Dependencies: None
### Description: Modify the add_reflection_to_journal function to use the ensure_journal_directory utility instead of directly creating directories.
### Details:


## 10.3. Add tests for ensure_journal_directory utility [pending]
### Dependencies: None
### Description: Create unit tests to verify the ensure_journal_directory utility correctly creates directories when they don't exist and handles existing directories properly.
### Details:


## 10.4. Update existing tests for on-demand directory creation [pending]
### Dependencies: None
### Description: Modify existing tests to verify that the reflection addition process correctly creates directories on-demand when needed.
### Details:


## 10.5. Update ensure_journal_directory to accept file paths [pending]
### Dependencies: None
### Description: Modify the ensure_journal_directory function to accept a file path and create the parent directory structure, following the on-demand directory creation pattern.
### Details:


## 10.6. Add tests for on-demand directory creation compliance [pending]
### Dependencies: None
### Description: Create tests that verify all file-writing operations follow the on-demand directory creation pattern as documented in docs/on-demand-directory-pattern.md.
### Details:


## 10.7. Review and update all file operations [pending]
### Dependencies: None
### Description: Review all file operations in the codebase to ensure they call ensure_journal_directory before writing and don't create directories upfront.
### Details:


## 10.8. Verify no CLI implementation for reflection addition [pending]
### Dependencies: None
### Description: Verify that no CLI command implementation exists for adding reflections, as this functionality will only be available through the MCP server.
### Details:


## 10.9. Add tests for AI agent reflection addition [pending]
### Dependencies: None
### Description: Create tests to verify that the AI agent can successfully add reflections through the MCP operation.
### Details:


## 10.10. Update documentation to reflect MCP-only implementation [pending]
### Dependencies: None
### Description: Update relevant documentation (including README.md) to clarify that manual reflection addition is handled by the MCP server and AI agent, not through CLI commands, in accordance with the updated engineering spec.
### Details:


## 10.11. Verify CLI is limited to setup commands only [pending]
### Dependencies: None
### Description: Review the CLI implementation to ensure it only includes setup commands (journal-init, install-hook) and no operational commands like add-reflection.
### Details:


## 10.12. Add tests to verify CLI command limitations [pending]
### Dependencies: None
### Description: Create tests to verify that the CLI only provides setup commands and does not include any operational commands for journal manipulation.
### Details:


## 10.13. Research UX differences between MCP prompts vs tools for reflections [pending]
### Dependencies: None
### Description: Evaluate the user experience differences between implementing manual reflections as an MCP prompt versus an MCP tool, considering ease of use, discoverability, and natural workflow integration.
### Details:


## 10.14. Analyze technical implementation complexity [pending]
### Dependencies: None
### Description: Compare the technical implementation complexity of MCP prompts versus MCP tools for manual reflection addition, including development effort, maintenance considerations, and potential limitations.
### Details:


## 10.15. Evaluate dual implementation approach [pending]
### Dependencies: None
### Description: Assess whether both MCP prompt and MCP tool implementations should be available for manual reflections, or if one approach is clearly superior for this use case.
### Details:


## 10.16. Document AI agent integration considerations [pending]
### Dependencies: None
### Description: Document how each approach (prompt vs. tool) would integrate with AI agents and existing workflow patterns, identifying any advantages or limitations.
### Details:


## 10.17. Verify alignment with MCP-first architecture [pending]
### Dependencies: None
### Description: Ensure the chosen approach aligns with MCP-first architecture principles and document the rationale for the implementation decision.
### Details:


## 10.18. Create implementation decision document [pending]
### Dependencies: None
### Description: Compile research findings into a decision document that clearly outlines the chosen implementation approach (prompt, tool, or both) with supporting rationale before proceeding with implementation.
### Details:


