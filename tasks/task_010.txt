# Task ID: 10
# Title: Implement Manual Reflection Addition
# Status: pending
# Dependencies: 5, 6
# Priority: high
# Description: Create the functionality to add manual reflections to journal entries, ensuring they are prioritized in summaries.
# Details:
Implement manual reflection addition in both the MCP server and CLI with the following features:

1. Reflection formatting:
```python
def format_reflection(text):
    """Format a manual reflection with timestamp"""
    timestamp = datetime.now().strftime("%I:%M %p")
    return f"## {timestamp} â€” Manual Reflection\n\n{text}\n"
```

2. File appending (using ensure_journal_directory utility):
```python
def add_reflection_to_journal(text, config):
    """Add a reflection to today's journal"""
    date = datetime.now().strftime("%Y-%m-%d")
    journal_path = Path(config["journal"]["path"])
    
    file_path = journal_path / "daily" / f"{date}.md"
    
    # Use ensure_journal_directory utility to create directories if needed
    ensure_journal_directory(file_path)
    
    # Create file if needed
    if not file_path.exists():
        with open(file_path, "w") as f:
            f.write(f"# Journal for {date}\n")
    
    # Format and append reflection
    reflection = format_reflection(text)
    with open(file_path, "a") as f:
        f.write("\n\n" + reflection)
    
    return file_path
```

3. MCP handler implementation:
```python
@trace_operation("journal_add_reflection")
async def handle_add_reflection(request):
    """Handle journal/add-reflection operation"""
    text = request.get("text")
    if not text:
        return {"status": "error", "error": "No reflection text provided"}
    
    # Load config
    config = load_config()
    
    # Add reflection
    file_path = add_reflection_to_journal(text, config)
    
    return {
        "status": "success",
        "file_path": str(file_path),
        "reflection": text
    }
```

4. CLI command implementation:
```python
@cli.command()
@click.argument("text")
def add_reflection(text):
    """Add manual reflection to today's journal"""
    try:
        # Load config
        config = load_config()
        
        # Add reflection
        file_path = add_reflection_to_journal(text, config)
        
        click.echo(f"Reflection added to {file_path}")
    except Exception as e:
        click.echo(f"Error: {e}")
```

5. Ensure journal directory utility:
```python
def ensure_journal_directory(file_path):
    """Ensure directories exist for the given file path, creating them on-demand if needed"""
    directory = file_path.parent
    directory.mkdir(parents=True, exist_ok=True)
    return directory
```

## Acceptance Criteria
- All file-writing functions (including add_reflection_to_journal) must call ensure_journal_directory(file_path) before writing
- No code should create directories upfront
- Implementation must follow the on-demand directory creation pattern as documented in docs/on-demand-directory-pattern.md

# Test Strategy:
1. Unit tests for reflection formatting
2. Tests for file appending
3. Tests for MCP handler implementation
4. Tests for CLI command implementation
5. Tests for creating new journal file if needed
6. Tests for appending to existing journal file
7. Integration tests for full reflection addition flow
8. Tests for ensure_journal_directory utility
9. Tests for on-demand directory creation when directories don't exist
10. Tests to verify proper directory structure is created
11. Tests to verify compliance with on-demand directory creation pattern
12. Tests to ensure no directories are created until file operations are performed
13. Tests to verify ensure_journal_directory is called before any file writing operations
14. Tests following patterns documented in docs/on-demand-directory-pattern.md

# Subtasks:
## 10.1. Create ensure_journal_directory utility function [pending]
### Dependencies: None
### Description: Implement the ensure_journal_directory utility function that creates journal directories on-demand following the new pattern.
### Details:


## 10.2. Update add_reflection_to_journal to use ensure_journal_directory [pending]
### Dependencies: None
### Description: Modify the add_reflection_to_journal function to use the ensure_journal_directory utility instead of directly creating directories.
### Details:


## 10.3. Add tests for ensure_journal_directory utility [pending]
### Dependencies: None
### Description: Create unit tests to verify the ensure_journal_directory utility correctly creates directories when they don't exist and handles existing directories properly.
### Details:


## 10.4. Update existing tests for on-demand directory creation [pending]
### Dependencies: None
### Description: Modify existing tests to verify that the reflection addition process correctly creates directories on-demand when needed.
### Details:


## 10.5. Update ensure_journal_directory to accept file paths [pending]
### Dependencies: None
### Description: Modify the ensure_journal_directory function to accept a file path and create the parent directory structure, following the on-demand directory creation pattern.
### Details:


## 10.6. Add tests for on-demand directory creation compliance [pending]
### Dependencies: None
### Description: Create tests that verify all file-writing operations follow the on-demand directory creation pattern as documented in docs/on-demand-directory-pattern.md.
### Details:


## 10.7. Review and update all file operations [pending]
### Dependencies: None
### Description: Review all file operations in the codebase to ensure they call ensure_journal_directory before writing and don't create directories upfront.
### Details:


