# Task ID: 3
# Title: Implement Git Utilities
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create utility functions for Git operations including commit processing, repository detection, and hook management.
# Details:
Implement Git utilities in `src/mcp_journal/git_utils.py` with the following features:

1. Repository detection and validation:
```python
def get_repo(path=None):
    """Get Git repository from current or specified path"""
    # Implementation using GitPython

def is_git_repo(path=None):
    """Check if path is a Git repository"""
    # Implementation
```

2. Commit processing:
```python
def get_current_commit(repo=None):
    """Get the current (HEAD) commit"""
    # Implementation

def get_commit_details(commit):
    """Extract relevant details from a commit"""
    # Implementation

def get_commit_diff_summary(commit):
    """Generate a simplified summary of file changes"""
    # Implementation

def is_journal_only_commit(commit, journal_path):
    """Check if commit only modifies journal files"""
    # Implementation for anti-recursion
```

3. Hook management:
```python
def install_post_commit_hook(repo_path=None):
    """Install the post-commit hook"""
    # Implementation

def backup_existing_hook(hook_path):
    """Backup existing hook if present"""
    # Implementation
```

4. Backfill detection:
```python
def get_commits_since_last_entry(repo, journal_path):
    """Get commits that don't have journal entries"""
    # Implementation
```

# Test Strategy:
1. Unit tests for repository detection and validation
2. Tests for commit detail extraction
3. Tests for diff summary generation
4. Tests for journal-only commit detection (anti-recursion)
5. Tests for hook installation and backup
6. Tests for backfill detection
7. Mock Git repositories for testing
