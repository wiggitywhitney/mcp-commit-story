# Task ID: 3
# Title: Implement Git Utilities
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create utility functions for Git operations including commit processing, repository detection, and hook management.
# Details:
Implement Git utilities in `src/mcp_journal/git_utils.py` with the following features:

1. Repository detection and validation:
```python
def get_repo(path=None):
    """Get Git repository from current or specified path"""
    # Implementation using GitPython

def is_git_repo(path=None):
    """Check if path is a Git repository"""
    # Implementation
```

2. Commit processing:
```python
def get_current_commit(repo=None):
    """Get the current (HEAD) commit"""
    # Implementation

def get_commit_details(commit):
    """Extract relevant details from a commit"""
    # Implementation

def get_commit_diff_summary(commit):
    """Generate a simplified summary of file changes"""
    # Implementation

def is_journal_only_commit(commit, journal_path):
    """Check if commit only modifies journal files"""
    # Implementation for anti-recursion
```

3. Hook management:
```python
def install_post_commit_hook(repo_path=None):
    """Install the post-commit hook"""
    # Implementation

def backup_existing_hook(hook_path):
    """Backup existing hook if present"""
    # Implementation
```

4. Backfill detection:
```python
def get_commits_since_last_entry(repo, journal_path):
    """Get commits that don't have journal entries"""
    # Implementation
```

# Test Strategy:
1. Unit tests for repository detection and validation
2. Tests for commit detail extraction
3. Tests for diff summary generation
4. Tests for journal-only commit detection (anti-recursion)
5. Tests for hook installation and backup
6. Tests for backfill detection
7. Mock Git repositories for testing

# Subtasks:
## 1. Assess existing Git utilities code structure [pending]
### Dependencies: None
### Description: Review the current state of git_utils.py to understand what's already implemented and what needs to be added.
### Details:
Examine the existing git_utils.py file to identify: 1) Which functions are already implemented, 2) Code style and patterns to follow, 3) Dependencies being used, 4) Any existing test coverage. Create a report documenting findings and identifying gaps.

## 2. Verify GitPython dependency and setup [pending]
### Dependencies: 3.1
### Description: Ensure GitPython is properly installed and configured for the project.
### Details:
Check if GitPython is in requirements.txt or pyproject.toml. Install if missing. Create a simple script to verify GitPython can access a test repository. Document any version constraints or issues encountered.

## 3. Create test fixtures for Git operations [pending]
### Dependencies: 3.2
### Description: Develop test fixtures that provide consistent Git repositories for testing.
### Details:
Create a pytest fixture that: 1) Sets up a temporary Git repository, 2) Creates sample commits with known content, 3) Provides helper methods to manipulate the repo state. This fixture will be used by all subsequent test tasks.

## 4. Write tests for get_commit_diff_summary function [pending]
### Dependencies: 3.3
### Description: Create comprehensive tests for the get_commit_diff_summary function before implementation.
### Details:
Write tests that verify: 1) Basic diff summary for a simple commit, 2) Handling of file additions, modifications, and deletions, 3) Proper formatting of the summary output, 4) Edge cases like empty commits, binary files, etc.

## 5. Implement get_commit_diff_summary function [pending]
### Dependencies: 3.4
### Description: Implement the function to generate a simplified summary of file changes in a commit.
### Details:
Implement get_commit_diff_summary to: 1) Extract diff information from a commit object, 2) Categorize changes (added, modified, deleted), 3) Format the summary in a consistent way, 4) Handle edge cases identified in tests.

## 6. Write tests for backup_existing_hook function [pending]
### Dependencies: 3.3
### Description: Create tests for the backup_existing_hook function to verify it correctly preserves existing Git hooks.
### Details:
Write tests that verify: 1) Existing hooks are properly backed up with timestamp, 2) Permissions are preserved, 3) Function handles missing hooks gracefully, 4) Function handles read-only filesystem scenarios.

## 7. Implement backup_existing_hook function [pending]
### Dependencies: 3.6
### Description: Implement the function to safely backup existing Git hooks before modification.
### Details:
Implement backup_existing_hook to: 1) Check if a hook exists at the specified path, 2) Create a timestamped backup copy if it exists, 3) Preserve file permissions, 4) Return the backup path or None if no backup was needed.

## 8. Write tests for install_post_commit_hook function [pending]
### Dependencies: 3.7
### Description: Create tests for the install_post_commit_hook function to verify it correctly installs the hook.
### Details:
Write tests that verify: 1) Hook is correctly installed with proper content, 2) Existing hooks are backed up (using the previously implemented function), 3) Proper permissions are set on the hook file, 4) Function handles various error conditions gracefully.

## 9. Implement install_post_commit_hook function [pending]
### Dependencies: 3.8
### Description: Implement the function to install the post-commit hook in a Git repository.
### Details:
Implement install_post_commit_hook to: 1) Determine the correct hook path, 2) Back up any existing hook using backup_existing_hook, 3) Write the new hook content with appropriate shebang and commands, 4) Set executable permissions, 5) Handle potential errors.

## 10. Write tests for get_commits_since_last_entry function [pending]
### Dependencies: 3.3
### Description: Create tests for the get_commits_since_last_entry function to verify it correctly identifies commits without journal entries.
### Details:
Write tests that verify: 1) Commits after the last journal entry are correctly identified, 2) Function handles repositories with no journal entries, 3) Function correctly filters out journal-only commits, 4) Edge cases like empty repositories are handled properly.

## 11. Implement get_commits_since_last_entry function [pending]
### Dependencies: 3.10
### Description: Implement the function to identify commits that don't have corresponding journal entries.
### Details:
Implement get_commits_since_last_entry to: 1) Find the most recent commit that modified the journal, 2) Get all commits since that point, 3) Filter out any commits that only modified the journal, 4) Return the list of commits that need entries, 5) Handle edge cases identified in tests.

## 12. Document Git utilities and perform final verification [pending]
### Dependencies: 3.5, 3.9, 3.11
### Description: Add comprehensive docstrings and verify all Git utility functions work together correctly.
### Details:
1) Add or update docstrings for all functions following project conventions, 2) Create usage examples for the README, 3) Perform integration testing to ensure all functions work together correctly, 4) Verify error handling and edge cases across the entire module.

