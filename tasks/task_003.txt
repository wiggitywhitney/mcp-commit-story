# Task ID: 3
# Title: Implement Git Utilities
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create utility functions for Git operations including commit processing, repository detection, and hook management.
# Details:
Implement Git utilities in `src/mcp_journal/git_utils.py` with the following features:

1. Repository detection and validation:
```python
def get_repo(path=None):
    """Get Git repository from current or specified path"""
    # Implementation using GitPython

def is_git_repo(path=None):
    """Check if path is a Git repository"""
    # Implementation
```

2. Commit processing:
```python
def get_current_commit(repo=None):
    """Get the current (HEAD) commit"""
    # Implementation

def get_commit_details(commit):
    """Extract relevant details from a commit"""
    # Implementation

def get_commit_diff_summary(commit):
    """Generate a simplified summary of file changes"""
    # Implementation

def is_journal_only_commit(commit, journal_path):
    """Check if commit only modifies journal files"""
    # Implementation for anti-recursion
```

3. Hook management:
```python
def install_post_commit_hook(repo_path=None):
    """Install the post-commit hook"""
    # Implementation

def backup_existing_hook(hook_path):
    """Backup existing hook if present"""
    # Implementation
```

4. Backfill detection:
```python
def get_commits_since_last_entry(repo, journal_path):
    """Get commits that don't have journal entries"""
    # Implementation
```

# Test Strategy:
1. Unit tests for repository detection and validation
2. Tests for commit detail extraction
3. Tests for diff summary generation
4. Tests for journal-only commit detection (anti-recursion)
5. Tests for hook installation and backup
6. Tests for backfill detection
7. Mock Git repositories for testing

# Subtasks:
## 1. Assess existing Git utilities code structure [done]
### Dependencies: None
### Description: Review the current state of git_utils.py to understand what's already implemented and what needs to be added.
### Details:
Examine the existing git_utils.py file to identify: 1) Which functions are already implemented, 2) Code style and patterns to follow, 3) Dependencies being used, 4) Any existing test coverage. Create a report documenting findings and identifying gaps.
<info added on 2025-05-19T21:40:39.524Z>
Implementation Plan for Subtask 3.1: Assess existing Git utilities code structure

1. Review the current state of src/mcp_journal/git_utils.py:
   - List all functions currently implemented.
   - Note code style, docstring usage, and type hints.
   - Identify which required functions (per spec/task) are missing or stubbed.
   - Check for conditional imports and error handling patterns.
2. Review dependencies:
   - Confirm GitPython usage and import style.
   - Check pyproject.toml for GitPython entry.
3. Review test coverage:
   - List all test files related to git_utils.py (e.g., tests/unit/test_git_utils.py).
   - Note which functions are already covered by tests and which are not.
   - Check for the presence of test fixtures for git repo manipulation.
4. Create a report:
   - Summarize findings: implemented functions, missing functions, code style, dependencies, test coverage, and gaps.
   - Identify any immediate cleanup or setup needed before further TDD work.
</info added on 2025-05-19T21:40:39.524Z>
<info added on 2025-05-19T21:43:52.003Z>
Examine the existing git_utils.py file to identify: 1) Which functions are already implemented, 2) Code style and patterns to follow, 3) Dependencies being used, 4) Any existing test coverage. Create a report documenting findings and identifying gaps.

<info added on 2025-05-19T21:40:39.524Z>
Implementation Plan for Subtask 3.1: Assess existing Git utilities code structure

1. Review the current state of src/mcp_journal/git_utils.py:
   - List all functions currently implemented.
   - Note code style, docstring usage, and type hints.
   - Identify which required functions (per spec/task) are missing or stubbed.
   - Check for conditional imports and error handling patterns.
2. Review dependencies:
   - Confirm GitPython usage and import style.
   - Check pyproject.toml for GitPython entry.
3. Review test coverage:
   - List all test files related to git_utils.py (e.g., tests/unit/test_git_utils.py).
   - Note which functions are already covered by tests and which are not.
   - Check for the presence of test fixtures for git repo manipulation.
4. Create a report:
   - Summarize findings: implemented functions, missing functions, code style, dependencies, test coverage, and gaps.
   - Identify any immediate cleanup or setup needed before further TDD work.
</info added on 2025-05-19T21:40:39.524Z>

Assessment Report for Subtask 3.1: Existing Git Utilities Code Structure

1. Current State of src/mcp_journal/git_utils.py
- Functions implemented: is_git_repo, get_repo, get_current_commit, is_journal_only_commit, get_commit_details
- Code style: Uses docstrings, type hints, error handling, and conditional import of GitPython. Follows project conventions.
- Missing functions (per spec/task): get_commit_diff_summary, install_post_commit_hook, backup_existing_hook, get_commits_since_last_entry

2. Dependencies
- GitPython is conditionally imported and used. Should be present in pyproject.toml (verify and add if missing).

3. Test Coverage
- Test file: tests/unit/test_git_utils.py exists and is substantial (140 lines).
- Coverage: Tests for existing functions likely present, but not for missing functions. No test fixtures for git repo manipulation in tests/fixtures/.
- Recommendation: Create pytest fixtures for temporary git repositories to support robust TDD for new and existing functions.

4. Summary of Gaps and Immediate Needs
- Gaps: Several required functions are not yet implemented or stubbed. No test fixtures for git repo setup/teardown. Need to verify GitPython is in pyproject.toml.
- Immediate needs before further TDD: Add/verify GitPython in dependencies. Create pytest fixture for temporary git repos. Review and, if needed, expand test coverage for existing functions.

This assessment is logged for traceability and future reference.
</info added on 2025-05-19T21:43:52.003Z>

## 2. Verify GitPython dependency and setup [done]
### Dependencies: 3.1
### Description: Ensure GitPython is properly installed and configured for the project.
### Details:
Check if GitPython is in requirements.txt or pyproject.toml. Install if missing. Create a simple script to verify GitPython can access a test repository. Document any version constraints or issues encountered.
<info added on 2025-05-19T21:45:13.239Z>
Check if GitPython is in requirements.txt or pyproject.toml. Install if missing. Create a simple script to verify GitPython can access a test repository. Document any version constraints or issues encountered.

Implementation Plan:
1. Check pyproject.toml for a GitPython dependency entry. If missing, add it and install dependencies.
2. Write a minimal test in tests/unit/test_git_utils.py (or a new test file if more appropriate) that:
   - Attempts to import git (GitPython)
   - Attempts to instantiate a Repo object for the current directory (or a temp directory)
   - Asserts that the Repo object is created or raises a clear error if not a git repo
3. Run the test to confirm it fails if GitPython is missing or misconfigured.
4. If the test fails due to missing dependency, install GitPython and rerun the test to confirm it passes.
5. Document any version constraints or issues encountered in the subtask log.
</info added on 2025-05-19T21:45:13.239Z>
<info added on 2025-05-19T21:46:22.303Z>
GitPython dependency has been successfully verified and set up. The package is present in pyproject.toml with version constraint 'gitpython>=3.1.0'. A test-driven development approach was used to verify the functionality by creating a test case named 'test_gitpython_import_and_repo_instantiation' in the tests/unit/test_git_utils.py file. This test confirms that GitPython can be properly imported and that a Repo object can be instantiated without errors. The test was executed and passed successfully, confirming that GitPython is correctly installed and functioning as expected. No version constraints issues or other problems were encountered during the verification process. The subtask has been completed successfully and is ready to be marked as done.
</info added on 2025-05-19T21:46:22.303Z>

## 3. Create test fixtures for Git operations [done]
### Dependencies: 3.2
### Description: Develop test fixtures that provide consistent Git repositories for testing.
### Details:
Create a pytest fixture that: 1) Sets up a temporary Git repository, 2) Creates sample commits with known content, 3) Provides helper methods to manipulate the repo state. This fixture will be used by all subsequent test tasks.
<info added on 2025-05-19T21:51:45.859Z>
Create a pytest fixture that: 1) Sets up a temporary Git repository, 2) Creates sample commits with known content, 3) Provides helper methods to manipulate the repo state. This fixture will be used by all subsequent test tasks.

Implementation Plan:
1. Design a pytest fixture in tests/conftest.py that:
   - Sets up a temporary directory as a new Git repository using GitPython
   - Creates a sequence of sample commits with known content (add, modify, delete files)
   - Provides helper methods to manipulate the repo state (add files, commit changes, checkout branches)
   - Ensures proper cleanup after tests complete

2. Write TDD tests for the fixture itself:
   - Verify the fixture creates a valid Git repository
   - Verify the expected commits and file contents exist
   - Test helper methods for adding/committing files
   - Test methods for manipulating repository state (branches, etc.)

3. Development approach:
   - First run tests to confirm they fail (fixture not implemented)
   - Implement the fixture with all required functionality
   - Rerun tests to ensure they pass
   - Document the fixture's usage and limitations

4. Fixture API design:
   - git_repo(): Main fixture that returns a repository object
   - Helper methods: add_file(), commit_changes(), create_branch(), etc.
   - Predefined test scenarios with known commit history
</info added on 2025-05-19T21:51:45.859Z>
<info added on 2025-05-19T21:54:24.767Z>
The git_repo fixture has been successfully implemented in tests/conftest.py. The fixture creates a temporary Git repository with an initial commit containing a file named 'file1.txt' with the content 'hello world\n'. The fixture yields the GitPython Repo object for use in tests and ensures proper cleanup of the temporary directory after tests complete.

TDD tests have been added in tests/unit/test_git_utils.py to verify:
1. The fixture correctly creates a valid Git repository
2. The expected file exists with the correct content
3. The initial commit is properly recorded

All tests are now passing, confirming that the fixture works as intended. The fixture provides a clean, isolated Git environment for each test, making it suitable for testing Git-related functionality throughout the codebase.

The implementation follows the planned approach from the implementation plan, though with a simpler initial version focused on core functionality. The fixture is now ready to be used in subsequent Git-related tests, particularly for the upcoming task of testing the get_commit_diff_summary function.

Next steps will be to proceed to subtask 3.4 to write tests for the get_commit_diff_summary function, which will utilize this fixture.
</info added on 2025-05-19T21:54:24.767Z>

## 4. Write tests for get_commit_diff_summary function [done]
### Dependencies: 3.3
### Description: Create comprehensive tests for the get_commit_diff_summary function before implementation.
### Details:
Write tests that verify: 1) Basic diff summary for a simple commit, 2) Handling of file additions, modifications, and deletions, 3) Proper formatting of the summary output, 4) Edge cases like empty commits, binary files, etc.
<info added on 2025-05-19T21:56:18.931Z>
Write tests that verify: 1) Basic diff summary for a simple commit, 2) Handling of file additions, modifications, and deletions, 3) Proper formatting of the summary output, 4) Edge cases like empty commits, binary files, etc.

Implementation Plan:
1. Add TDD tests in tests/unit/test_git_utils.py for the not-yet-implemented get_commit_diff_summary function.
   - Use the git_repo fixture to create commits with various file changes:
     - Simple text file addition
     - Text file modification
     - Text file deletion
     - Binary file changes
     - Empty commit (no changes)
     - Large diff with many files
   - Write test cases to verify:
     - Basic diff summary returns correct stats for a simple commit
     - Function correctly identifies and counts file additions
     - Function correctly identifies and counts file modifications
     - Function correctly identifies and counts file deletions
     - Summary output follows the expected format (e.g., "+3 -1 files changed")
     - Edge cases are handled gracefully (empty commits return appropriate message, binary files are counted correctly)
     - Large diffs are summarized without performance issues
2. Run the tests to confirm they fail as expected (since the function is not yet implemented)
3. Document any assumptions about the expected function signature and behavior
</info added on 2025-05-19T21:56:18.931Z>

## 5. Implement get_commit_diff_summary function [done]
### Dependencies: 3.4
### Description: Implement the function to generate a simplified summary of file changes in a commit.
### Details:
Implement get_commit_diff_summary to: 1) Extract diff information from a commit object, 2) Categorize changes (added, modified, deleted), 3) Format the summary in a consistent way, 4) Handle edge cases identified in tests.

## 6. Write tests for backup_existing_hook function [done]
### Dependencies: 3.3
### Description: Create tests for the backup_existing_hook function to verify it correctly preserves existing Git hooks.
### Details:
Write tests that verify: 1) Existing hooks are properly backed up with timestamp, 2) Permissions are preserved, 3) Function handles missing hooks gracefully, 4) Function handles read-only filesystem scenarios.

## 7. Implement backup_existing_hook function [done]
### Dependencies: 3.6
### Description: Implement the function to safely backup existing Git hooks before modification.
### Details:
Implement backup_existing_hook to: 1) Check if a hook exists at the specified path, 2) Create a timestamped backup copy if it exists, 3) Preserve file permissions, 4) Return the backup path or None if no backup was needed.

## 8. Write tests for install_post_commit_hook function [done]
### Dependencies: 3.7
### Description: Create tests for the install_post_commit_hook function to verify it correctly installs the hook.
### Details:
Write tests that verify: 1) Hook is correctly installed with proper content, 2) Existing hooks are backed up (using the previously implemented function), 3) Proper permissions are set on the hook file, 4) Function handles various error conditions gracefully.

## 9. Implement install_post_commit_hook function [done]
### Dependencies: 3.8
### Description: Implement the function to install the post-commit hook in a Git repository.
### Details:
Implement install_post_commit_hook to: 1) Determine the correct hook path, 2) Back up any existing hook using backup_existing_hook, 3) Write the new hook content with appropriate shebang and commands, 4) Set executable permissions, 5) Handle potential errors.

## 10. Write tests for get_commits_since_last_entry function [done]
### Dependencies: 3.3
### Description: Create tests for the get_commits_since_last_entry function to verify it correctly identifies commits without journal entries.
### Details:
Write tests that verify: 1) Commits after the last journal entry are correctly identified, 2) Function handles repositories with no journal entries, 3) Function correctly filters out journal-only commits, 4) Edge cases like empty repositories are handled properly.

## 11. Implement get_commits_since_last_entry function [done]
### Dependencies: 3.10
### Description: Implement the function to identify commits that don't have corresponding journal entries.
### Details:
Implement get_commits_since_last_entry to: 1) Find the most recent commit that modified the journal, 2) Get all commits since that point, 3) Filter out any commits that only modified the journal, 4) Return the list of commits that need entries, 5) Handle edge cases identified in tests.

## 12. Document Git utilities and perform final verification [pending]
### Dependencies: 3.5, 3.9, 3.11
### Description: Add comprehensive docstrings and verify all Git utility functions work together correctly.
### Details:
1) Add or update docstrings for all functions following project conventions, 2) Create usage examples for the README, 3) Perform integration testing to ensure all functions work together correctly, 4) Verify error handling and edge cases across the entire module.

