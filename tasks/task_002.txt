# Task ID: 2
# Title: Implement Configuration System
# Status: in-progress
# Dependencies: 1
# Priority: high
# Description: Create the configuration module to handle loading and validating configuration from .mcp-journalrc.yaml files.
# Details:
Implement the config.py module with the following functionality:

1. Load configuration from multiple sources with precedence:
   - Local config (.mcp-journalrc.yaml in repo root)
   - Global config (~/.mcp-journalrc.yaml)
   - Built-in defaults

2. Validate configuration structure and values
   - Missing/invalid fields use defaults and continue with warnings
   - Malformed YAML logs error but continues with defaults
   - Invalid sections are ignored with warnings

3. Provide a Config class with properties for all configuration options

Example configuration structure:
```yaml
journal:
  path: journal/
  auto_generate: true
  include_terminal: true
  include_chat: true
  include_mood: true
  section_order:
    - summary
    - accomplishments
    - frustrations
    - tone
    - commit_details
    - reflections
  auto_summarize:
    daily: true     # Generate daily summary on first commit of new day
    weekly: true    # Generate weekly summary on first commit of week (Monday)
    monthly: true   # Generate monthly summary on first commit of month
    yearly: true    # Generate yearly summary on first commit of year
    frequency:
      weekly: "monday"      # First commit on Mondays
      monthly: "first-day"  # First commit of month
      yearly: "january-1"   # First commit of year
```

Implement functions for:
- Loading config from file
- Merging configs with proper precedence
- Validating config structure
- Providing default values for missing fields

# Test Strategy:
Write unit tests for:
- Loading config from file
- Merging configs with proper precedence
- Handling missing or invalid configuration files
- Validating config structure
- Default value application
- Error handling for malformed YAML

Test with various valid and invalid configuration files to ensure robust error handling.

# Subtasks:
## 1. Create Config class with default configuration values [done]
### Dependencies: None
### Description: Implement the Config class with properties for all configuration options and define default values for each setting.
### Details:
Create a config.py module with a Config class that defines all configuration properties with type hints. Implement properties for journal path, auto-generation settings, included sections, and section order. Define a method that returns a complete default configuration dictionary that will be used when no config files are found or when fields are missing.
<info added on 2025-05-17T22:18:09.946Z>
Create a config.py module with a Config class that defines all configuration properties with type hints. Implement properties for journal path, auto-generation settings, included sections, and section order. Define a method that returns a complete default configuration dictionary that will be used when no config files are found or when fields are missing.

Implementation Plan:

1. Set up the test file first (test_config.py):
   - Create tests for Config class initialization with no parameters
   - Test default values for all expected configuration properties
   - Test the get_default_config method returns a complete dictionary
   - Test type annotations are correct for all properties

2. Create the config.py module:
   - Import necessary typing modules (Dict, List, Optional, etc.)
   - Define a Config class with appropriate docstrings
   - Implement __init__ method that accepts an optional configuration dictionary
   - Add type hints to all parameters and return values

3. Define core configuration properties:
   - journal_path: Path to store journal files (default: ~/journal)
   - auto_generate: Boolean flag for auto-generating entries (default: True)
   - included_sections: List of section names to include (default: ["Summary", "Tasks", "Notes", "Ideas"])
   - section_order: Dictionary mapping section names to display order (default order for the included sections)
   - date_format: String format for dates (default: "%Y-%m-%d")
   - file_extension: String for journal file extension (default: ".md")

4. Implement property getters and setters:
   - For each configuration option, create a property with getter
   - Add validation in setters where appropriate (e.g., journal_path must be a valid path)
   - Ensure type safety through annotations and runtime checks

5. Create the get_default_config method:
   - Return a dictionary with all default configuration values
   - Ensure the dictionary structure matches what will be loaded from config files
   - Include nested configurations if necessary

6. Add helper methods:
   - as_dict(): Returns the current configuration as a dictionary
   - is_valid(): Validates the current configuration
   - reset_to_defaults(): Resets all properties to default values

7. Implement proper error handling:
   - Create custom exceptions for configuration errors
   - Add validation methods to check configuration integrity

8. Add documentation:
   - Document each property and method with docstrings
   - Include examples of usage in the class docstring
   - Document the expected format of the configuration dictionary

This implementation should be designed with the next subtask in mind, which involves loading configuration from multiple locations. The Config class should be easily extendable to support merging configurations from different sources, with later sources overriding earlier ones.
</info added on 2025-05-17T22:18:09.946Z>

## 2. Implement configuration file loading from multiple locations [pending]
### Dependencies: 2.1
### Description: Create functions to load configuration files from local and global locations with proper error handling.
### Details:
Implement functions to load YAML configuration from both local (.mcp-journalrc.yaml in repo root) and global (~/.mcp-journalrc.yaml) locations. Handle file not found errors gracefully. For malformed YAML, log errors but continue with defaults. Use the pathlib module for cross-platform path handling and PyYAML for parsing YAML files.

## 3. Implement configuration merging with proper precedence [pending]
### Dependencies: 2.1, 2.2
### Description: Create a function to merge configurations from multiple sources respecting the precedence order: defaults < global < local.
### Details:
Implement a merge_configs function that takes multiple configuration dictionaries and combines them with the correct precedence. Local config should override global config, which should override defaults. Implement deep merging for nested configuration sections. Ensure that partial configurations only override the specified values.

## 4. Implement configuration validation [pending]
### Dependencies: 2.1, 2.3
### Description: Create validation functions to check the structure and values of loaded configurations, providing warnings for invalid entries.
### Details:
Implement validation for all configuration sections and fields. Check types, allowed values, and required fields. For invalid or missing fields, use default values and log appropriate warnings. For completely invalid sections, ignore them with warnings. Create a validate_config function that returns a sanitized configuration with all invalid values replaced with defaults.

## 5. Create public API for configuration system [pending]
### Dependencies: 2.1, 2.2, 2.3, 2.4
### Description: Implement the main load_config function that orchestrates the entire configuration loading process and returns a fully initialized Config object.
### Details:
Create a public load_config function that: 1) Loads configurations from all sources, 2) Merges them with proper precedence, 3) Validates the merged configuration, and 4) Returns a Config object initialized with the final configuration. Add optional parameters to specify custom config file paths. Implement proper logging throughout the process.

## 6. Review and update README/docs [pending]
### Dependencies: 2.1, 2.2, 2.3, 2.4, 2.5
### Description: Review and update the README.md and other documentation to reflect changes made in this task. Ensure documentation is clear, accurate, and up to date.
### Details:


