# Task ID: 2
# Title: Implement Configuration System
# Status: in-progress
# Dependencies: 1
# Priority: high
# Description: Create the configuration system that handles loading, validation, and merging of configuration files from local and global sources.
# Details:
Implement the configuration system in `src/mcp_journal/config.py` with the following features:

1. Configuration loading with precedence:
   - Local config (.mcp-journalrc.yaml in repo root)
   - Global config (~/.mcp-journalrc.yaml)
   - Built-in defaults

2. Configuration validation:
   - Validate required fields
   - Apply defaults for missing fields
   - Handle malformed YAML gracefully

3. Configuration schema:
```python
default_config = {
    "journal": {
        "path": "journal/",
        "auto_generate": True,
        "include_terminal": True,
        "include_chat": True,
        "include_mood": True,
        "section_order": [
            "summary",
            "accomplishments",
            "frustrations",
            "tone",
            "commit_details",
            "reflections"
        ],
        "auto_summarize": {
            "daily": True,
            "weekly": True,
            "monthly": True,
            "yearly": True
        }
    },
    "telemetry": {
        "enabled": True,
        "service_name": "mcp-journal"
    }
}
```

4. Configuration API:
```python
def load_config(config_path=None):
    """Load configuration with proper precedence"""
    # Implementation

def get_config_value(key, default=None):
    """Get a configuration value by key path (e.g., 'journal.path')"""
    # Implementation

def validate_config(config):
    """Validate configuration and apply defaults"""
    # Implementation
```

# Test Strategy:
1. Unit tests for configuration loading from different sources
2. Tests for configuration precedence (local overrides global)
3. Tests for validation of configuration values
4. Tests for handling malformed YAML
5. Tests for applying defaults for missing fields
6. Tests for accessing nested configuration values via dot notation
7. Tests for deep merge behavior with various data types
8. Tests for specific error types and error handling

# Subtasks:
## 2. Test Environment Setup [done]
### Dependencies: None
### Description: Set up a proper test environment before implementing configuration system functionality
### Details:
1. **Virtual Environment Creation**
   - Create a proper Python virtual environment for isolation
   - Document environment setup steps for all contributors
   - Ensure environment is reproducible across platforms

2. **Development Dependencies**
   - Install all development dependencies from pyproject.toml
   - Verify pytest and related plugins are properly installed
   - Configure pytest with appropriate settings

3. **Test Validation Framework**
   - Create a test runner script to verify all existing tests
   - Document standard testing practices for the project
   - Set up coverage reporting for tests

4. **CI Integration Preparation**
   - Prepare configuration for future CI integration
   - Document test workflows for automated testing
   - Create test helper utilities as needed

5. **Verification of Task 1 Tests**
   - Run all tests associated with Task 1
   - Fix any failing tests
   - Only when all Task 1 tests pass will Task 1 be marked complete
<info added on 2025-05-18T22:10:50.421Z>
1. **Virtual Environment Creation**\n   - Create a proper Python virtual environment for isolation\n   - Document environment setup steps for all contributors\n   - Ensure environment is reproducible across platforms\n\n2. **Development Dependencies**\n   - Install all development dependencies from pyproject.toml\n   - Verify pytest and related plugins are properly installed\n   - Configure pytest with appropriate settings\n\n3. **Test Validation Framework**\n   - Create a test runner script to verify all existing tests\n   - Document standard testing practices for the project\n   - Set up coverage reporting for tests\n\n4. **CI Integration Preparation**\n   - Prepare configuration for future CI integration\n   - Document test workflows for automated testing\n   - Create test helper utilities as needed\n\n5. **Verification of Task 1 Tests**\n   - Run all tests associated with Task 1\n   - Fix any failing tests\n   - Only when all Task 1 tests pass will Task 1 be marked complete\n\n6. **Configuration System Test Verification**\n   - Executed `pytest tests/unit/test_config.py -v` to specifically test configuration functionality\n   - All 12 configuration tests passed successfully\n   - Ran full test suite with `pytest` - all 32 tests passed\n\n7. **Implementation Verification**\n   - Reviewed `src/mcp_journal/config.py` implementation\n   - Verified key functions are working correctly:\n     * `find_config_files()` properly locates local and global config files in all test scenarios\n     * `load_config_with_precedence()` correctly implements precedence order (local > global > defaults)\n     * `validate_config()` successfully validates configuration structure and types\n   - No implementation changes needed as all functionality is working as expected
</info added on 2025-05-18T22:10:50.421Z>

## 2.1. Implement test-first approach (TDD) [done]
### Dependencies: None
### Description: Enhance existing tests in test_config.py to cover all configuration system functionality
### Details:
- Create tests for configuration loading from multiple sources
- Create tests for configuration precedence
- Create tests for nested configuration access using dot notation
- Create tests for configuration validation and schema enforcement
- Create tests for handling malformed YAML gracefully

## 2.2. Implement Config class with enhanced features [done]
### Dependencies: None
### Description: Create a Config class that supports nested access and validation
### Details:
- Implement dot notation access for nested configurations
- Add schema validation with required fields
- Implement error handling for malformed configurations
- Add type validation for configuration values

## 2.3. Implement configuration loading logic [done]
### Dependencies: None
### Description: Create functions to load configuration from multiple sources with proper precedence
### Details:
- Implement loading from local config (.mcp-journalrc.yaml in project root)
- Implement loading from global config (~/.mcp-journalrc.yaml)
- Implement loading from built-in defaults
- Create utility functions to find configuration files
- Add error handling for missing/inaccessible files

## 2.4. Implement configuration merge logic [done]
### Dependencies: None
### Description: Create functions to merge configurations from multiple sources
### Details:
- Implement deep merge for configurations
- Ensure proper handling of nested dictionaries and lists
- Document merge behavior for various data types

## 2.5. Implement configuration access API [done]
### Dependencies: None
### Description: Create functions to access configuration values
### Details:
- Implement get_config_value() for accessing nested config values
- Support default values for missing configuration entries
- Add helper functions for common configuration operations

## 2.6. Implement configuration validation [done]
### Dependencies: None
### Description: Create functions to validate configuration values
### Details:
- Create schema-based validation system
- Provide clear error messages for validation failures
- Implement automated type checking and constraints

## 2.7. Add comprehensive documentation [done]
### Dependencies: None
### Description: Document all configuration system functionality
### Details:
- Add comprehensive docstrings for all functions and classes
- Include usage examples in docstrings
- Document the configuration precedence rules

## 2.8. Implement error handling [done]
### Dependencies: None
### Description: Create specific error types and handling for configuration issues
### Details:
- Implement specific error types for configuration issues
- Ensure all external operations (file I/O) have proper error handling
- Log appropriate warnings for configuration problems

## 2.9. Fix failing configuration tests [in-progress]
### Dependencies: None
### Description: Address the 3 failing tests by fixing implementation issues in config.py
### Details:
- Fix the find_config_files function to correctly locate configuration files
- Fix load_config_with_precedence to properly apply configuration precedence rules
- Fix validate_config to correctly validate configuration against schema
- Ensure all 12 tests pass before marking this task as complete

Implementation Plan for Fixing Failing Configuration Tests:

1. **Test-First Approach (TDD)**
   - Run the failing tests to understand exactly what's failing
   - Review the test expectations and understand what the implementations should do
   - Document the specific errors and failure reasons
   - Fix one test at a time, verifying each fix before moving on

2. **fix_find_config_files Function**
   - Focus on handling the different cases correctly:
     * When both config files exist
     * When only local config exists
     * When only global config exists
     * When neither config exists
   - Make sure path handling is correct for home directory expansion
   - Verify it works consistently across operating systems

3. **fix_load_config_with_precedence Function**
   - Ensure local config properly overrides global config values
   - Implement deep merging of configuration dictionaries
   - Verify default values are applied correctly
   - Handle the case when configs are empty or missing

4. **fix_validate_config Function**
   - Implement schema validation against the required configuration structure
   - Check for required fields and add appropriate defaults
   - Add type validation for configuration values
   - Handle malformed input gracefully with proper error messages

5. **Testing and Verification**
   - Run tests after each fix to verify progress
   - Ensure all tests pass before marking the subtask complete
   - Look for edge cases that might not be covered by tests

## 2.11. Final review and optimization [pending]
### Dependencies: None
### Description: Review the configuration system implementation and optimize as needed
### Details:
- Review code for performance optimizations
- Check for any redundant code or logic
- Ensure all edge cases are handled
- Verify documentation is complete and accurate
- Confirm all tests are passing consistently

