# Task ID: 2
# Title: Implement Configuration System
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create the configuration system that handles loading, validation, and merging of configuration files from local and global sources.
# Details:
Implement the configuration system in `src/mcp_journal/config.py` with the following features:

1. Configuration loading with precedence:
   - Local config (.mcp-journalrc.yaml in repo root)
   - Global config (~/.mcp-journalrc.yaml)
   - Built-in defaults

2. Configuration validation:
   - Validate required fields
   - Apply defaults for missing fields
   - Handle malformed YAML gracefully

3. Configuration schema:
```python
default_config = {
    "journal": {
        "path": "journal/",
        "auto_generate": True,
        "include_terminal": True,
        "include_chat": True,
        "include_mood": True,
        "section_order": [
            "summary",
            "accomplishments",
            "frustrations",
            "tone",
            "commit_details",
            "reflections"
        ],
        "auto_summarize": {
            "daily": True,
            "weekly": True,
            "monthly": True,
            "yearly": True
        }
    },
    "telemetry": {
        "enabled": True,
        "service_name": "mcp-journal"
    }
}
```

4. Configuration API:
```python
def load_config(config_path=None):
    """Load configuration with proper precedence"""
    # Implementation

def get_config_value(key, default=None):
    """Get a configuration value by key path (e.g., 'journal.path')"""
    # Implementation

def validate_config(config):
    """Validate configuration and apply defaults"""
    # Implementation
```

# Test Strategy:
1. Unit tests for configuration loading from different sources
2. Tests for configuration precedence (local overrides global)
3. Tests for validation of configuration values
4. Tests for handling malformed YAML
5. Tests for applying defaults for missing fields
6. Tests for accessing nested configuration values
