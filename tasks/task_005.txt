# Task ID: 5
# Title: Implement Journal Entry Generation
# Status: pending
# Dependencies: 2, 3
# Priority: high
# Description: Create the core functionality for generating journal entries from Git commits, terminal history, and chat context.
# Details:
Implement journal entry generation in `src/mcp_journal/journal.py` with the following features:

1. Journal entry structure:
```python
class JournalEntry:
    """Represents a journal entry with all sections"""
    def __init__(self, commit, config):
        self.commit = commit
        self.config = config
        self.timestamp = datetime.now()
        self.sections = {}
        # Initialize sections based on config
    
    def to_markdown(self):
        """Convert entry to markdown format"""
        # Implementation
```

2. Section generators:
```python
def generate_summary_section(commit, context):
    """Generate the summary section"""
    # Implementation

def generate_accomplishments_section(commit, context):
    """Generate the accomplishments section"""
    # Implementation

def generate_frustrations_section(commit, context):
    """Generate the frustrations section"""
    # Implementation

def generate_terminal_section(context):
    """Generate the terminal commands section"""
    # Implementation

def generate_discussion_section(context):
    """Generate the discussion notes section"""
    # Implementation

def generate_tone_section(commit, context):
    """Generate the tone/mood section"""
    # Implementation

def generate_commit_details_section(commit):
    """Generate the commit details section"""
    # Implementation
```

3. Context collection:
```python
def collect_terminal_history(since_timestamp=None):
    """Collect terminal history since timestamp"""
    # Implementation

def collect_chat_history(since_commit=None):
    """Collect chat history since commit reference"""
    # Implementation

def collect_ai_terminal_commands():
    """Collect terminal commands executed by AI"""
    # Implementation
```

4. File operations:
```python
def get_journal_file_path(date=None):
    """Get path to journal file for date"""
    # Implementation

def append_to_journal_file(entry, file_path):
    """Append entry to journal file"""
    # Implementation

def create_journal_directories():
    """Create journal directory structure"""
    # Implementation
```

# Test Strategy:
1. Unit tests for each section generator
2. Tests for context collection methods
3. Tests for file operations
4. Tests for markdown formatting
5. Tests for handling missing context gracefully
6. Integration tests for full entry generation
7. Tests for anti-hallucination rules
