# Task ID: 6
# Title: Implement MCP Server Core
# Status: pending
# Dependencies: 1, 2, 5
# Priority: high
# Description: Create the MCP server implementation using the Anthropic MCP Python SDK, registering tools for journal operations.
# Details:
Implement the MCP server in `src/mcp_journal/server.py` with the following features:

1. Server initialization:
```python
from mcp import MCPServer

def create_mcp_server():
    """Create and configure the MCP server"""
    server = MCPServer()
    
    # Register tools
    server.register_tool("journal/new-entry", handle_new_entry)
    server.register_tool("journal/summarize", handle_summarize)
    server.register_tool("journal/blogify", handle_blogify)
    server.register_tool("journal/backfill", handle_backfill)
    server.register_tool("journal/install-hook", handle_install_hook)
    server.register_tool("journal/add-reflection", handle_add_reflection)
    server.register_tool("journal/init", handle_init)
    
    return server
```

2. Tool handlers:
```python
@trace_operation("journal_new_entry")
async def handle_new_entry(request):
    """Handle journal/new-entry operation"""
    # Implementation
    return {"status": "success", "file_path": file_path}

@trace_operation("journal_summarize")
async def handle_summarize(request):
    """Handle journal/summarize operation"""
    # Implementation
    return {"status": "success", "file_path": file_path, "content": content}

# Additional handlers for other operations
```

3. Server startup:
```python
def start_server():
    """Start the MCP server"""
    server = create_mcp_server()
    # Configure server settings
    server.start()
    return server
```

4. Error handling:
```python
class MCPError(Exception):
    """Base class for MCP server errors"""
    def __init__(self, message, status="error"):
        self.message = message
        self.status = status
        super().__init__(message)

def handle_mcp_error(func):
    """Decorator for handling MCP errors"""
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except MCPError as e:
            return {"status": e.status, "error": e.message}
        except Exception as e:
            return {"status": "error", "error": str(e)}
    return wrapper
```

# Test Strategy:
1. Unit tests for server initialization
2. Tests for each tool handler
3. Tests for error handling
4. Mock MCP server for testing
5. Tests for server startup and configuration
6. Integration tests for server operations
