# Task ID: 6
# Title: Implement MCP Server Core
# Status: pending
# Dependencies: 1, 2, 5
# Priority: high
# Description: Create the MCP server implementation using the Anthropic MCP Python SDK, registering tools for journal operations.
# Details:
Implement the MCP server in `src/mcp_journal/server.py` with the following features:

1. Server initialization:
```python
from mcp import MCPServer

def create_mcp_server():
    """Create and configure the MCP server"""
    server = MCPServer()
    
    # Register tools
    server.register_tool("journal/new-entry", handle_new_entry)
    server.register_tool("journal/summarize", handle_summarize)
    server.register_tool("journal/blogify", handle_blogify)
    server.register_tool("journal/backfill", handle_backfill)
    server.register_tool("journal/install-hook", handle_install_hook)
    server.register_tool("journal/add-reflection", handle_add_reflection)
    server.register_tool("journal/init", handle_init)
    
    return server
```

2. Tool handlers:
```python
@trace_operation("journal_new_entry")
async def handle_new_entry(request):
    """Handle journal/new-entry operation"""
    # Implementation
    return {"status": "success", "file_path": file_path}

@trace_operation("journal_summarize")
async def handle_summarize(request):
    """Handle journal/summarize operation"""
    # Implementation
    return {"status": "success", "file_path": file_path, "content": content}

# Additional handlers for other operations
```

3. Server startup:
```python
def start_server():
    """Start the MCP server"""
    server = create_mcp_server()
    # Configure server settings
    server.start()
    return server
```

4. Error handling:
```python
class MCPError(Exception):
    """Base class for MCP server errors"""
    def __init__(self, message, status="error"):
        self.message = message
        self.status = status
        super().__init__(message)

def handle_mcp_error(func):
    """Decorator for handling MCP errors"""
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except MCPError as e:
            return {"status": e.status, "error": e.message}
        except Exception as e:
            return {"status": "error", "error": str(e)}
    return wrapper
```

# Test Strategy:
1. Unit tests for server initialization
2. Tests for each tool handler
3. Tests for error handling
4. Mock MCP server for testing
5. Tests for server startup and configuration
6. Integration tests for server operations

# Subtasks:
## 1. MCP Server Initialization & Setup [done]
### Dependencies: None
### Description: Scaffold the MCP server using the Anthropic MCP Python SDK. Integrate the SDK, set up the server class, and define the server entrypoint. Follow strict TDD: (1) Define required types/interfaces for server and tool registration, (2) Write failing tests for server instantiation and tool registration, (3) Ask user for specific server config requirements, (4) Write tests for config pattern compliance, (5) Implement server scaffold and registration logic, (6) Run full test suite and document. All code must use async/await and proper type hints. This subtask is a dependency for all other Task 6 subtasks.
### Details:


## 2. Core Error Handling System [done]
### Dependencies: 6.1
### Description: Implement the MCPError base class and error handling decorators for the MCP server. TDD steps: (1) Define error/response types, (2) Write failing tests for error handling and decorator, (3) Ask user for error handling requirements, (4) Write tests for error pattern compliance, (5) Implement error classes and decorator, (6) Run full test suite and document. Depends on MCP Server Initialization & Setup.
### Details:


## 3. journal/new-entry Operation Handler [done]
### Dependencies: 6.1, 6.2
### Description: Implement the core MCP operation for journal entry generation. TDD steps: (1) Define request/response types, (2) Write failing tests for handler, (3) Ask user for operation-specific requirements, (4) Write tests for compliance, (5) Implement async handler using Task 5 journal generation logic, (6) Run full test suite and document. Must use proper error handling and type hints. Depends on MCP Server Initialization & Setup and Core Error Handling System.
### Details:


## 4. journal/add-reflection Operation Handler [pending]
### Dependencies: 6.1, 6.2
### Description: Implement the MCP operation for manual reflection addition. TDD steps: (1) Define request/response types, (2) Write failing tests for handler, (3) Ask user for operation-specific requirements, (4) Write tests for compliance, (5) Implement async handler, (6) Run full test suite and document. Must use proper error handling and type hints. Depends on MCP Server Initialization & Setup and Core Error Handling System.
### Details:


## 5. Server Startup & Configuration [pending]
### Dependencies: 6.1, 6.2
### Description: Implement server startup, shutdown, and configuration logic. TDD steps: (1) Define config types/interfaces, (2) Write failing tests for lifecycle management, (3) Ask user for startup/config requirements, (4) Write tests for compliance, (5) Implement startup/config logic, (6) Run full test suite and document. Must use async/await and integrate with previous subtasks. Depends on MCP Server Initialization & Setup and Core Error Handling System.
### Details:


## 6. MCP Server Integration Test [pending]
### Dependencies: 6.1, 6.2, 6.3, 6.4, 6.5
### Description: Write an end-to-end integration test for the MCP server, covering all registered operations (journal/new-entry, journal/add-reflection, etc.). TDD steps: (1) Define integration test scenarios and expected results, (2) Write failing integration tests, (3) Ask user for additional integration requirements, (4) Write tests for compliance, (5) Implement integration logic, (6) Run full test suite and document. Must cover error handling, async/await, and integration with Task 5 journal generation. Depends on all previous Task 6 subtasks.
### Details:


