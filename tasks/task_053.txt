# Task ID: 53
# Title: Refactor Daily Summary Generation
# Status: pending
# Dependencies: 50
# Priority: high
# Description: Refactor existing daily summary generation from MCP-based to background, non-MCP generation using the same standalone approach as journal entries.
# Details:
This task refactors the existing daily summary functionality in `src/mcp_commit_story/daily_summary.py` to use the new background generation pattern instead of MCP tools:

1. **Refactor Existing Daily Summary Generator Function**:
```python
def generate_daily_summary_standalone(date=None, git_context=None):
    """
    Generate daily summaries without requiring MCP server or signals.
    
    Args:
        date: Optional date to generate summary for (defaults to today)
        git_context: Optional git context dictionary (if None, will be collected)
        
    Returns:
        dict: Generated summary data
    """
    # Set default date to today if not provided
    if date is None:
        date = datetime.now().strftime("%Y-%m-%d")
        
    # Collect git context if not provided
    if git_context is None:
        git_context = collect_git_context()
    
    # Reuse existing function to collect journal entries for the specified date
    journal_entries = collect_recent_journal_entries(date)
    
    # Reuse existing prompt preparation logic
    prompt = prepare_daily_summary_prompt(date, journal_entries, git_context)
    
    # Generate summary using AI (similar pattern to journal generator)
    summary_content = generate_ai_content(
        prompt=prompt,
        model_config=get_model_config("daily_summary")
    )
    
    # Reuse existing formatting and saving functions
    formatted_summary = format_daily_summary(summary_content, date)
    save_daily_summary(formatted_summary, date)
    
    return formatted_summary
```

2. **Adapt Existing Helper Functions**:
- Identify all helper functions in `daily_summary.py` that currently depend on MCP
- Refactor these functions to work without MCP dependencies while preserving their functionality
- Ensure the refactored functions maintain the same interfaces and return values

3. **Reuse Existing Git Hook Integration**:
- Locate the existing summary trigger logic in git hooks
- Update the hooks to call the standalone version instead of the MCP-based version
- Preserve all existing trigger conditions and logic

4. **Update Configuration**:
```python
def get_model_config(generation_type):
    """Get the appropriate model configuration based on generation type"""
    # Return different configurations for journal vs. summary generation
    # Reuse existing configuration values where appropriate
```

5. **Remove MCP Dependencies**:
- Identify and remove all MCP-dependent code in the current daily summary generation
- Ensure all necessary context is collected directly without MCP signals
- Maintain the same output format and quality as the MCP-based version

6. **Preserve Existing Scheduling Logic**:
- Locate and reuse the existing logic that determines when summaries should be generated
- Ensure this logic continues to work correctly with the standalone approach

7. **Research Note**:
- Consider whether to include inefficiency detection and solution suggestions in daily summaries (e.g., detecting repeated identical queries to AI assistant, similar questions asked differently, etc.). Evaluate during implementation whether this enhancement would be valuable.

The implementation should follow the same patterns established in the standalone journal generator (Task 50), adapting them specifically for daily summaries. This refactoring completes the transition of all AI generation functionality to background processes that don't require the MCP server while preserving all existing daily summary capabilities.

# Test Strategy:
To verify the correct implementation of the daily summary refactoring:

1. **Unit Testing**:
   - Create unit tests for each refactored helper function to ensure they work without MCP
   - Test the main generate_daily_summary_standalone function with mocked dependencies
   - Verify proper error handling for missing journal entries or AI generation failures

2. **Integration Testing**:
   - Test the complete flow from git hook trigger to summary generation
   - Verify that summaries are generated correctly with the same quality as the MCP version
   - Test with various date inputs and journal entry scenarios

3. **Comparison Testing**:
   - Generate summaries using both the old MCP-based approach and the new standalone approach
   - Compare outputs to ensure consistency and quality
   - Document any differences and ensure they're acceptable or improvements

4. **Git Hook Testing**:
   - Verify that existing git hooks correctly trigger the refactored summary generation
   - Test with different git operations (commit, push, etc.)
   - Ensure hooks don't significantly impact git operation performance

5. **Offline Testing**:
   - Verify summaries can be generated without MCP server running
   - Test in environments with limited connectivity
   - Ensure all necessary context is collected directly

6. **Manual Review**:
   - Manually review several generated summaries for quality and completeness
   - Compare with previous MCP-generated summaries
   - Ensure the refactored implementation produces equivalent or better results

7. **Edge Case Testing**:
   - Test with empty journal entries
   - Test with very large numbers of journal entries
   - Test with unusual date ranges or formats

8. **Regression Testing**:
   - Verify that all existing functionality continues to work as expected
   - Ensure no regressions in summary quality or format
   - Test all edge cases that were previously handled correctly

9. **Performance Testing**:
   - Measure and compare generation time with the MCP-based approach
   - Ensure the background process doesn't consume excessive resources
   - Verify that git operations remain responsive during summary generation
