# Task ID: 12
# Title: Implement Blog Post Generation
# Status: pending
# Dependencies: 5, 6, 7
# Priority: low
# Description: Create the functionality to convert journal entries and summaries into blog post format for storytelling.
# Details:
Implement blog post generation in both the MCP server and CLI with the following features:

1. Blog post generation:
```python
def generate_blog_post(files, config):
    """Generate blog post from journal files"""
    # Extract content from files
    entries = []
    
    for file_path in files:
        with open(file_path, "r") as f:
            content = f.read()
            # Extract entries
            # Implementation
    
    # Generate blog post sections
    blog_post = []
    
    # Add title and introduction
    blog_post.append("# Project Journey: From Idea to Implementation\n")
    blog_post.append("*An engineering story based on journal entries*\n")
    
    # Add narrative sections
    blog_post.append("## The Challenge\n")
    # Generate challenge narrative
    
    blog_post.append("## The Approach\n")
    # Generate approach narrative
    
    blog_post.append("## Key Decisions\n")
    # Extract and narrate decisions
    
    blog_post.append("## Lessons Learned\n")
    # Extract and narrate lessons
    
    blog_post.append("## Conclusion\n")
    # Generate conclusion
    
    return "\n\n".join(blog_post)
```

2. Blog post file saving:
```python
def save_blog_post(content, title, config):
    """Save blog post to file"""
    # Create directory if needed
    dir_path = Path(config["journal"]["path"]) / "blog_posts"
    dir_path.mkdir(parents=True, exist_ok=True)
    
    # Generate file name from title
    file_name = title.lower().replace(" ", "-") + ".md"
    file_path = dir_path / file_name
    
    # Save file
    with open(file_path, "w") as f:
        f.write(content)
    
    return file_path
```

3. MCP handler implementation:
```python
@trace_operation("journal_blogify")
async def handle_blogify(request):
    """Handle journal/blogify operation"""
    files = request.get("files", [])
    title = request.get("title", "Engineering Journey")
    
    if not files:
        return {"status": "error", "error": "No files provided"}
    
    # Load config
    config = load_config()
    
    # Convert file paths to Path objects
    file_paths = [Path(f) for f in files]
    
    # Check if files exist
    missing = [str(f) for f in file_paths if not f.exists()]
    if missing:
        return {"status": "error", "error": f"Files not found: {', '.join(missing)}"}
    
    # Generate blog post
    content = generate_blog_post(file_paths, config)
    
    # Save blog post
    file_path = save_blog_post(content, title, config)
    
    return {
        "status": "success",
        "file_path": str(file_path),
        "content": content
    }
```

4. CLI command implementation:
```python
@cli.command()
@click.argument("files", nargs=-1, type=click.Path(exists=True))
@click.option("--title", default="Engineering Journey", help="Blog post title")
@click.option("--debug", is_flag=True, help="Show debug information")
def blogify(files, title, debug):
    """Convert journal entries to blog post"""
    try:
        if not files:
            click.echo("No files provided")
            return
        
        # Load config
        config = load_config()
        
        # Convert file paths to Path objects
        file_paths = [Path(f) for f in files]
        
        # Generate blog post
        content = generate_blog_post(file_paths, config)
        
        # Save blog post
        file_path = save_blog_post(content, title, config)
        
        click.echo(f"Blog post saved to {file_path}")
    except Exception as e:
        if debug:
            click.echo(f"Error: {e}")
            traceback.print_exc()
        else:
            click.echo(f"Error: {e}")
```

# Test Strategy:
1. Unit tests for blog post generation
2. Tests for blog post file saving
3. Tests for MCP handler implementation
4. Tests for CLI command implementation
5. Tests for handling multiple input files
6. Tests for narrative generation
7. Integration tests for full blog post generation flow
