# Task ID: 14
# Title: Implement Git Hook Installation
# Status: pending
# Dependencies: 3, 6, 7
# Priority: medium
# Description: Create the functionality to install a Git post-commit hook for automatic journal entry generation.
# Details:
Implement Git hook installation in both the MCP server and CLI with the following features:

1. Hook installation:
```python
def install_post_commit_hook(repo_path=None):
    """Install the post-commit hook"""
    if repo_path is None:
        repo_path = os.getcwd()
    
    # Get hook path
    hook_path = Path(repo_path) / ".git" / "hooks" / "post-commit"
    
    # Check if hook already exists
    if hook_path.exists():
        # Backup existing hook
        backup_path = backup_existing_hook(hook_path)
    
    # Create hook
    with open(hook_path, "w") as f:
        f.write("#!/bin/sh\n")
        f.write("mcp-journal new-entry\n")
    
    # Make executable
    os.chmod(hook_path, 0o755)
    
    return hook_path
```

2. Hook backup:
```python
def backup_existing_hook(hook_path):
    """Backup existing hook if present"""
    backup_path = hook_path.with_suffix(".bak")
    
    # If backup already exists, use numbered backup
    if backup_path.exists():
        i = 1
        while backup_path.with_suffix(f".bak{i}").exists():
            i += 1
        backup_path = backup_path.with_suffix(f".bak{i}")
    
    # Copy hook to backup
    shutil.copy2(hook_path, backup_path)
    
    return backup_path
```

3. MCP handler implementation:
```python
@trace_operation("journal_install_hook")
async def handle_install_hook(request):
    """Handle journal/install-hook operation"""
    repo_path = request.get("repo_path", os.getcwd())
    
    # Check if repo exists
    if not is_git_repo(repo_path):
        return {"status": "error", "error": "Not a Git repository"}
    
    # Install hook
    hook_path = install_post_commit_hook(repo_path)
    
    return {
        "status": "success",
        "hook_path": str(hook_path)
    }
```

4. CLI command implementation:
```python
@cli.command()
def install_hook():
    """Install git post-commit hook"""
    try:
        # Check if repo exists
        if not is_git_repo():
            click.echo("Not a Git repository")
            return
        
        # Check if hook already exists
        hook_path = Path.cwd() / ".git" / "hooks" / "post-commit"
        if hook_path.exists():
            if not click.confirm("Hook already exists. Overwrite?", default=False):
                click.echo("Hook installation cancelled")
                return
        
        # Install hook
        hook_path = install_post_commit_hook()
        
        click.echo(f"Git post-commit hook installed at {hook_path}")
    except Exception as e:
        click.echo(f"Error: {e}")
```

# Test Strategy:
1. Unit tests for hook installation
2. Tests for hook backup
3. Tests for MCP handler implementation
4. Tests for CLI command implementation
5. Tests for handling existing hooks
6. Tests for hook permissions
7. Integration tests for full hook installation flow
