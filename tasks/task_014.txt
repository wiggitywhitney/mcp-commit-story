# Task ID: 14
# Title: Implement Git Hook Installation
# Status: in-progress
# Dependencies: 3, 6, 7
# Priority: medium
# Description: Create the functionality to install a Git post-commit hook for automatic journal entry generation.

MVP dependency: This task is now critical for the initial user journey.
# Details:
Implement Git hook installation in both the MCP server and CLI with the following features:

1. Hook installation:
```python
def install_post_commit_hook(repo_path=None):
    """Install the post-commit hook"""
    if repo_path is None:
        repo_path = os.getcwd()
    
    # Get hook path
    hook_path = Path(repo_path) / ".git" / "hooks" / "post-commit"
    
    # Check if hook already exists
    if hook_path.exists():
        # Backup existing hook
        backup_path = backup_existing_hook(hook_path)
    
    # Create hook
    with open(hook_path, "w") as f:
        f.write("#!/bin/sh\n")
        f.write("mcp-journal new-entry\n")
    
    # Make executable
    os.chmod(hook_path, 0o755)
    
    return hook_path
```

2. Hook backup:
```python
def backup_existing_hook(hook_path):
    """Backup existing hook if present"""
    backup_path = hook_path.with_suffix(".bak")
    
    # If backup already exists, use numbered backup
    if backup_path.exists():
        i = 1
        while backup_path.with_suffix(f".bak{i}").exists():
            i += 1
        backup_path = backup_path.with_suffix(f".bak{i}")
    
    # Copy hook to backup
    shutil.copy2(hook_path, backup_path)
    
    return backup_path
```

3. MCP handler implementation:
```python
@trace_operation("journal_install_hook")
async def handle_install_hook(request):
    """Handle journal/install-hook operation"""
    repo_path = request.get("repo_path", os.getcwd())
    
    # Check if repo exists
    if not is_git_repo(repo_path):
        return {"status": "error", "error": "Not a Git repository"}
    
    # Install hook
    hook_path = install_post_commit_hook(repo_path)
    
    return {
        "status": "success",
        "hook_path": str(hook_path)
    }
```

4. CLI command implementation:
```python
@cli.command()
def install_hook():
    """Install git post-commit hook"""
    try:
        # Check if repo exists
        if not is_git_repo():
            click.echo("Not a Git repository")
            return
        
        # Check if hook already exists
        hook_path = Path.cwd() / ".git" / "hooks" / "post-commit"
        if hook_path.exists():
            if not click.confirm("Hook already exists. Overwrite?", default=False):
                click.echo("Hook installation cancelled")
                return
        
        # Install hook
        hook_path = install_post_commit_hook()
        
        click.echo(f"Git post-commit hook installed at {hook_path}")
    except Exception as e:
        click.echo(f"Error: {e}")
```

# Test Strategy:
1. Unit tests for hook installation
2. Tests for hook backup
3. Tests for MCP handler implementation
4. Tests for CLI command implementation
5. Tests for handling existing hooks
6. Tests for hook permissions
7. Integration tests for full hook installation flow

# Subtasks:
## 1. Hook Content Generation [done]
### Dependencies: None
### Description: Create functionality to generate the post-commit hook script content.

TDD Steps:
1. WRITE TESTS FIRST
  - Create tests/unit/test_git_hook_installation.py
  - Test generate_hook_content() function
  - Test cases: basic hook content, custom commands, proper shebang, executable format
  - RUN TESTS - VERIFY THEY FAIL
2. GET APPROVAL FOR DESIGN CHOICES
  - PAUSE FOR MANUAL APPROVAL: Hook script content and commands to include
  - PAUSE FOR MANUAL APPROVAL: Shebang line (#!/bin/sh vs #!/bin/bash)
  - PAUSE FOR MANUAL APPROVAL: Error handling within the hook script
3. IMPLEMENT FUNCTIONALITY
  - Implement generate_hook_content() in src/mcp_commit_story/git_hook_installation.py
  - Generate proper shell script with appropriate commands
  - RUN TESTS - VERIFY THEY PASS
4. DOCUMENT AND COMPLETE
  - Add documentation IF NEEDED in three places
  - Double check all subtask requirements are met
  - MARK COMPLETE
### Details:
<info added on 2025-05-26T20:49:55.982Z>
Implemented the `generate_hook_content` function in `src/mcp_commit_story/git_utils.py` with the following features:

- Uses '#!/bin/sh' shebang for maximum portability across Unix-like systems
- Configurable to run either the default command 'mcp-commit-story new-entry' or a custom command
- Redirects all output to /dev/null and includes '|| true' to ensure the hook never blocks commits
- Ensures lightweight, non-intrusive operation with Unix (LF) line endings

Added comprehensive unit tests in `tests/unit/test_git_hook_installation.py`:
1. `test_basic_hook_content`: Validates default command, shebang, output suppression, and error handling
2. `test_custom_command`: Confirms proper handling of custom commands
3. `test_proper_shebang`: Verifies correct shebang line implementation
4. `test_executable_format`: Ensures proper Unix line endings (no CRLF)

All tests pass successfully, and the implementation adheres to the approved design specifications.
</info added on 2025-05-26T20:49:55.982Z>

## 2. Hook Backup Functionality [done]
### Dependencies: None
### Description: Implement functionality to safely backup existing git hooks.

TDD Steps:
1. WRITE TESTS FIRST
  - Add tests to tests/unit/test_git_hook_installation.py
  - Test backup_existing_hook() function (already exists in git_utils.py - may need enhancement)
  - Test cases: no existing hook, existing hook backup, multiple backups, permission errors
  - RUN TESTS - VERIFY THEY FAIL
2. GET APPROVAL FOR DESIGN CHOICES
  - PAUSE FOR MANUAL APPROVAL: Backup file naming convention (timestamp format)
  - PAUSE FOR MANUAL APPROVAL: Backup location (same directory vs separate backup folder)
  - PAUSE FOR MANUAL APPROVAL: Maximum number of backups to keep
3. IMPLEMENT FUNCTIONALITY
  - Enhance existing backup_existing_hook() in git_utils.py if needed
  - Handle all error cases identified in tests
  - RUN TESTS - VERIFY THEY PASS
4. DOCUMENT AND COMPLETE
  - Add documentation IF NEEDED in three places
  - Double check all subtask requirements are met
  - MARK COMPLETE
### Details:
<info added on 2025-05-26T21:02:52.229Z>
# Hook Backup Functionality

## Goal
Implement robust backup logic for existing post-commit hooks before installing a new one, following TDD principles.

## Relevant Files
- src/mcp_commit_story/git_utils.py (where install_post_commit_hook and backup_existing_hook are defined)
- tests/unit/test_git_utils.py (existing tests for hook installation and backup)
- tests/unit/test_git_hook_installation.py (may need new/updated tests for backup logic)

## Implementation Plan
1. **Review current backup_existing_hook implementation:**
   - Confirm it creates a timestamped backup of the existing post-commit hook
   - Check for edge cases: multiple backups, backup file naming, error handling
   - Ensure it doesn't overwrite previous backups and handles collisions

2. **Test Coverage:**
   - Write/expand tests for:
     - Backup creation when a hook exists
     - Multiple backups (unique names)
     - Failure cases (unwritable directory, etc.)
     - Backup file content verification
   - Confirm tests fail if logic is missing or incorrect

3. **Implementation:**
   - Refactor backup_existing_hook to:
     - Use clear timestamped naming (post-commit.bak.YYYYMMDD-HHMMSS)
     - Limit number of backups if required
     - Handle errors gracefully with appropriate logging
   - Integrate backup logic into install_post_commit_hook

4. **Documentation:**
   - Update relevant documentation with backup logic details

## Potential Challenges
- Handling permission errors or IO failures robustly
- Ensuring backup logic is idempotent and prevents data loss
- Maintaining consistent and discoverable backup naming

## Next Steps
Write failing tests for backup logic, then implement and verify the functionality.
</info added on 2025-05-26T21:02:52.229Z>

## 3. Hook Installation Core Logic [pending]
### Dependencies: None
### Description: Implement the main hook installation function with proper error handling.

TDD Steps:
1. WRITE TESTS FIRST
  - Add tests to tests/unit/test_git_hook_installation.py
  - Test install_post_commit_hook() function (enhance existing from git_utils.py)
  - Test cases: fresh install, replace existing, permission errors, invalid repo path
  - RUN TESTS - VERIFY THEY FAIL
2. GET APPROVAL FOR DESIGN CHOICES
  - PAUSE FOR MANUAL APPROVAL: User confirmation strategy for overwriting existing hooks
  - PAUSE FOR MANUAL APPROVAL: Hook file permissions (executable bits)
  - PAUSE FOR MANUAL APPROVAL: Integration with existing git_utils vs new module
3. IMPLEMENT FUNCTIONALITY
  - Enhance install_post_commit_hook() in git_utils.py to use proper hook content
  - Integrate with backup functionality from subtask 14.2
  - Use hook content generation from subtask 14.1
  - RUN TESTS - VERIFY THEY PASS
4. DOCUMENT AND COMPLETE
  - Add documentation IF NEEDED in three places
  - Double check all subtask requirements are met
  - MARK COMPLETE
### Details:


## 4. CLI Command Implementation [pending]
### Dependencies: None
### Description: Create CLI command for git hook installation.

TDD Steps:
1. WRITE TESTS FIRST
  - Create tests/unit/test_cli_install_hook.py
  - Test CLI install-hook command
  - Test cases: successful install, already exists prompts, error handling, JSON output format
  - RUN TESTS - VERIFY THEY FAIL
2. GET APPROVAL FOR DESIGN CHOICES
  - PAUSE FOR MANUAL APPROVAL: CLI command name (install-hook vs hook-install)
  - PAUSE FOR MANUAL APPROVAL: Interactive confirmation vs force flags
  - PAUSE FOR MANUAL APPROVAL: Output format (JSON like init command vs plain text)
3. IMPLEMENT FUNCTIONALITY
  - Add install hook command to src/mcp_commit_story/cli.py
  - Integrate with core installation logic from subtask 14.3
  - RUN TESTS - VERIFY THEY PASS
4. DOCUMENT AND COMPLETE
  - Add documentation IF NEEDED in three places
  - Double check all subtask requirements are met
  - MARK COMPLETE
### Details:


## 5. Integration Testing [pending]
### Dependencies: None
### Description: End-to-end testing of git hook installation workflow.

TDD Steps:
1. WRITE TESTS FIRST
  - Create tests/integration/test_git_hook_integration.py
  - Test full hook installation workflow in temporary git repositories
  - Test cases: clean install, overwrite existing, hook execution, cleanup scenarios
  - RUN TESTS - VERIFY THEY FAIL
2. NO APPROVAL NEEDED (integration testing)
3. IMPLEMENT FUNCTIONALITY
  - Fix any integration issues discovered
  - Ensure all components work together
  - RUN TESTS - VERIFY THEY PASS
4. DOCUMENT AND COMPLETE
  - Add documentation IF NEEDED in three places
  - Double check all subtask requirements are met
  - MARK COMPLETE
### Details:


## 6. Hook Execution Testing [pending]
### Dependencies: None
### Description: Verify that installed hooks actually execute correctly when commits are made.

TDD Steps:
1. WRITE TESTS FIRST
  - Add tests to tests/integration/test_git_hook_integration.py
  - Test actual hook execution after installation
  - Test cases: hook triggers on commit, hook calls correct command, error handling in hook
  - RUN TESTS - VERIFY THEY FAIL
2. NO APPROVAL NEEDED (testing existing functionality)
3. IMPLEMENT FUNCTIONALITY
  - Ensure hook content calls the correct mcp-commit-story command
  - Fix any execution issues discovered
  - RUN TESTS - VERIFY THEY PASS
4. DOCUMENT AND COMPLETE
  - Add documentation IF NEEDED in three places
  - Double check all subtask requirements are met
  - MARK COMPLETE
### Details:


