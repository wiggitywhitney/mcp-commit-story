# Task ID: 8
# Title: Implement Journal Initialization
# Status: pending
# Dependencies: 2, 3, 6, 7
# Priority: high
# Description: Create the functionality to initialize a journal in a Git repository, including directory structure and configuration.
# Details:
Implement journal initialization in both the MCP server and CLI with the following features:

1. Directory structure creation:
```python
def create_journal_structure(base_path):
    """Create journal directory structure"""
    # Create directories
    (base_path / "daily").mkdir(parents=True, exist_ok=True)
    (base_path / "summaries" / "daily").mkdir(parents=True, exist_ok=True)
    (base_path / "summaries" / "weekly").mkdir(parents=True, exist_ok=True)
    (base_path / "summaries" / "monthly").mkdir(parents=True, exist_ok=True)
    (base_path / "summaries" / "yearly").mkdir(parents=True, exist_ok=True)
    return True
```

2. Configuration file generation:
```python
def generate_default_config(config_path):
    """Generate default configuration file"""
    with open(config_path, "w") as f:
        yaml.dump(default_config, f, default_flow_style=False)
    return True
```

3. Hook installation prompt:
```python
def prompt_for_hook_installation():
    """Prompt user for hook installation"""
    return click.confirm("Install Git post-commit hook?", default=True)
```

4. MCP handler implementation:
```python
@trace_operation("journal_init")
async def handle_init(request):
    """Handle journal/init operation"""
    repo_path = request.get("repo_path", os.getcwd())
    
    # Check if already initialized
    config_path = Path(repo_path) / ".mcp-journalrc.yaml"
    if config_path.exists():
        return {"status": "error", "error": "Journal already initialized"}
    
    # Create structure and config
    journal_path = Path(repo_path) / "journal"
    create_journal_structure(journal_path)
    generate_default_config(config_path)
    
    # Return success
    return {
        "status": "success",
        "message": "Journal initialized successfully",
        "paths": {
            "config": str(config_path),
            "journal": str(journal_path)
        }
    }
```

5. CLI command implementation:
```python
@cli.command()
@click.option("--debug", is_flag=True, help="Show debug information")
def init(debug):
    """Initialize journal in current repository"""
    try:
        # Check if already initialized
        config_path = Path.cwd() / ".mcp-journalrc.yaml"
        if config_path.exists():
            click.echo("Journal already initialized")
            return
        
        # Create structure and config
        journal_path = Path.cwd() / "journal"
        create_journal_structure(journal_path)
        generate_default_config(config_path)
        
        # Prompt for hook installation
        if prompt_for_hook_installation():
            install_post_commit_hook()
            click.echo("Git post-commit hook installed")
        
        click.echo(f"Journal initialized at {journal_path}")
    except Exception as e:
        if debug:
            click.echo(f"Error: {e}")
            traceback.print_exc()
        else:
            click.echo(f"Error: {e}")
```

# Test Strategy:
1. Unit tests for directory structure creation
2. Tests for configuration file generation
3. Tests for hook installation prompt
4. Tests for MCP handler implementation
5. Tests for CLI command implementation
6. Tests for handling existing journal
7. Integration tests for full initialization flow
