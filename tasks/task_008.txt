# Task ID: 8
# Title: Implement Journal Initialization
# Status: in-progress
# Dependencies: 2, 3, 6, 7
# Priority: critical
# Description: Create the functionality to initialize a journal in a Git repository, including directory structure and configuration.

MVP dependency: This task is now critical for the initial user journey.
# Details:
Implement journal initialization in both the MCP server and CLI with the following features:

1. Directory structure creation:
```python
def create_journal_structure(base_path):
    """Create journal directory structure"""
    # Create directories
    (base_path / "daily").mkdir(parents=True, exist_ok=True)
    (base_path / "summaries" / "daily").mkdir(parents=True, exist_ok=True)
    (base_path / "summaries" / "weekly").mkdir(parents=True, exist_ok=True)
    (base_path / "summaries" / "monthly").mkdir(parents=True, exist_ok=True)
    (base_path / "summaries" / "yearly").mkdir(parents=True, exist_ok=True)
    return True
```

2. Simplified configuration file generation:
```python
def generate_default_config(config_path, journal_path):
    """Generate minimal default configuration file"""
    default_config = {
        "journal": {
            "path": str(journal_path)
        },
        "git": {
            "exclude_patterns": ["journal/**"]
        },
        "telemetry": {
            "enabled": True
        }
    }
    with open(config_path, "w") as f:
        yaml.dump(default_config, f, default_flow_style=False)
    return True
```

3. Configuration handling:
```python
def setup_configuration(repo_path):
    """Set up configuration file"""
    config_path = Path(repo_path) / ".mcp-journalrc.yaml"
    example_path = Path(repo_path) / ".mcp-journalrc.yaml.example"
    journal_path = Path(repo_path) / "journal"
    
    # Check if config already exists
    if config_path.exists():
        return False, "Journal already initialized"
    
    # Check for example config and copy if exists
    if example_path.exists():
        shutil.copy(example_path, config_path)
    else:
        # Generate minimal default config
        generate_default_config(config_path, journal_path)
    
    return True, config_path
```

4. MCP handler implementation:
```python
@trace_operation("journal_init")
async def handle_init(request):
    """Handle journal/init operation"""
    repo_path = request.get("repo_path", os.getcwd())
    
    # Setup configuration
    success, result = setup_configuration(repo_path)
    if not success:
        return {"status": "error", "error": result}
    
    # Create structure
    journal_path = Path(repo_path) / "journal"
    create_journal_structure(journal_path)
    
    # Install git hook (no longer optional)
    install_post_commit_hook(repo_path)
    
    # Return success
    return {
        "status": "success",
        "message": "Journal initialized successfully",
        "paths": {
            "config": str(result),
            "journal": str(journal_path)
        }
    }
```

5. CLI command implementation:
```python
@cli.command()
@click.option("--debug", is_flag=True, help="Show debug information")
def init(debug):
    """Initialize journal in current repository"""
    try:
        # Setup configuration
        success, result = setup_configuration(Path.cwd())
        if not success:
            click.echo(result)
            return
        
        # Create structure
        journal_path = Path.cwd() / "journal"
        create_journal_structure(journal_path)
        
        # Install git hook (no longer optional)
        install_post_commit_hook(Path.cwd())
        click.echo("Git post-commit hook installed")
        
        click.echo(f"Journal initialized at {journal_path}")
    except Exception as e:
        if debug:
            click.echo(f"Error: {e}")
            traceback.print_exc()
        else:
            click.echo(f"Error: {e}")
```

# Test Strategy:
1. Unit tests for directory structure creation
2. Tests for simplified configuration file generation
3. Tests for configuration handling (existing config, example config, default generation)
4. Tests for MCP handler implementation
5. Tests for CLI command implementation
6. Tests for handling existing journal
7. Integration tests for full initialization flow
8. Tests to verify git hook installation is always performed
9. Tests to verify the minimal configuration contains only the essential settings

# Subtasks:
## 1. Directory Structure Creation [done]
### Dependencies: None
### Description: Create journal directory structure functionality. TDD: Write tests for create_journal_directories(base_path), covering success, exists, permission errors, invalid paths. Pause for manual approval on layout, error handling, path validation. Implement in journal_init.py. Document in docs, PRD, spec. Mark complete when all requirements met.
### Details:
TDD Steps:
1. WRITE TESTS FIRST
   - Create tests/unit/test_journal_init.py
   - Test create_journal_directories(base_path)
   - Test cases: success, directory exists, permission errors, invalid paths
   - RUN TESTS - VERIFY THEY FAIL
2. GET APPROVAL FOR DESIGN CHOICES
   - PAUSE FOR MANUAL APPROVAL: Directory structure layout
   - PAUSE FOR MANUAL APPROVAL: Error handling approach
   - PAUSE FOR MANUAL APPROVAL: Path validation strategy
3. IMPLEMENT FUNCTIONALITY
   - Implement create_journal_directories() in src/mcp_commit_story/journal_init.py
   - Handle all error cases identified in tests
   - RUN TESTS - VERIFY THEY PASS
4. DOCUMENT AND COMPLETE
   - Add documentation IF NEEDED in three places
   - Double check all subtask requirements are met
   - MARK COMPLETE
<info added on 2025-05-26T15:44:09.221Z>
IMPLEMENTATION COMPLETE:
- Created directory structure as approved:
  - base_path/
    - daily/
    - summaries/
      - daily/
      - weekly/
      - monthly/
      - yearly/
- Implemented error handling:
  - NotADirectoryError when base_path exists but isn't a directory
  - PermissionError when write permissions are lacking
  - OSError for other filesystem exceptions
- Used pathlib.Path for path validation
- All directory creation uses exist_ok=True parameter
- All TDD tests now passing

NEXT STEPS:
- Complete documentation in:
  1. Function docstring
  2. Module docstring
  3. README usage section
- Final verification of requirements
- Mark subtask as complete
</info added on 2025-05-26T15:44:09.221Z>

## 2. Configuration File Generation [done]
### Dependencies: None
### Description: Generate default configuration files. TDD: Write tests for generate_default_config(), covering new config, existing config, malformed files, backup scenarios. Pause for manual approval on naming, backup, defaults. Implement and document. Mark complete when all requirements met.
### Details:
TDD Steps:
1. WRITE TESTS FIRST
   - Add tests to tests/unit/test_journal_init.py
   - Test generate_default_config()
   - Test cases: new config, existing config, malformed files, backup scenarios
   - RUN TESTS - VERIFY THEY FAIL
2. GET APPROVAL FOR DESIGN CHOICES
   - PAUSE FOR MANUAL APPROVAL: Config file naming convention
   - PAUSE FOR MANUAL APPROVAL: Backup strategy for existing configs
   - PAUSE FOR MANUAL APPROVAL: Default values to include
3. IMPLEMENT FUNCTIONALITY
   - Implement generate_default_config()
   - Integrate with existing config system
   - RUN TESTS - VERIFY THEY PASS
4. DOCUMENT AND COMPLETE
   - Add documentation IF NEEDED in three places
   - Double check all subtask requirements are met
   - MARK COMPLETE

## 3. Git Repository Validation [done]
### Dependencies: None
### Description: Validate git repository before initialization. TDD: Write tests for validate_git_repository(), covering valid repo, not a repo, bare repo, permission issues. Pause for manual approval on validation criteria, error format, integration. Implement and document. Mark complete when all requirements met.
### Details:
TDD Steps:
1. WRITE TESTS FIRST
   - Add tests to tests/unit/test_journal_init.py
   - Test validate_git_repository()
   - Test cases: valid repo, not a repo, bare repo, permission issues
   - RUN TESTS - VERIFY THEY FAIL
2. GET APPROVAL FOR DESIGN CHOICES
   - PAUSE FOR MANUAL APPROVAL: Validation criteria (bare repos OK?)
   - PAUSE FOR MANUAL APPROVAL: Error message format
   - PAUSE FOR MANUAL APPROVAL: Integration with existing git utils
3. IMPLEMENT FUNCTIONALITY
   - Implement validate_git_repository()
   - Use existing git_utils where possible
   - RUN TESTS - VERIFY THEY PASS
4. DOCUMENT AND COMPLETE
   - Add documentation IF NEEDED in three places
   - Double check all subtask requirements are met
   - MARK COMPLETE

## 4. Main Initialization Function [done]
### Dependencies: None
### Description: Create main journal initialization entry point. TDD: Write tests for initialize_journal(), orchestrating all previous functions, covering full success, partial failures, already initialized, rollback. Pause for manual approval on signature, rollback, detection logic. Implement and document. Mark complete when all requirements met.
### Details:
TDD Steps:
1. WRITE TESTS FIRST
   - Add tests to tests/unit/test_journal_init.py
   - Test initialize_journal() (orchestrates all previous functions)
   - Test cases: full success, partial failures, already initialized, rollback scenarios
   - RUN TESTS - VERIFY THEY FAIL
2. GET APPROVAL FOR DESIGN CHOICES
   - PAUSE FOR MANUAL APPROVAL: Function signature and parameters
   - PAUSE FOR MANUAL APPROVAL: Rollback strategy on failure
   - PAUSE FOR MANUAL APPROVAL: "Already initialized" detection logic
3. IMPLEMENT FUNCTIONALITY
   - Implement initialize_journal() main function
   - Orchestrate all previous subtask functions
   - RUN TESTS - VERIFY THEY PASS
4. DOCUMENT AND COMPLETE
   - Add documentation IF NEEDED in three places
   - Double check all subtask requirements are met
   - MARK COMPLETE

## 5. Integration Testing [pending]
### Dependencies: None
### Description: End-to-end testing of journal initialization. TDD: Write integration tests for full workflow in temp dirs, covering clean init, re-init, existing files, failure recovery. No approval needed. Implement and document. Mark complete when all requirements met.
### Details:
TDD Steps:
1. WRITE TESTS FIRST
   - Create tests/integration/test_journal_init_integration.py
   - Test full initialization workflow in temporary directories
   - Test cases: clean init, re-init, init with existing files, failure recovery
   - RUN TESTS - VERIFY THEY FAIL
2. NO APPROVAL NEEDED (integration testing)
3. IMPLEMENT FUNCTIONALITY
   - Fix any integration issues discovered
   - Ensure all components work together
   - RUN TESTS - VERIFY THEY PASS
4. DOCUMENT AND COMPLETE
   - Add documentation IF NEEDED in three places
   - Double check all subtask requirements are met
   - MARK COMPLETE

## 6. CLI Integration Preparation [pending]
### Dependencies: None
### Description: Prepare for CLI command integration (Task 7). TDD: Write tests for CLI-friendly error handling and return value formats. Pause for manual approval on return format and error codes. Implement and document. Mark complete when all requirements met.
### Details:
TDD Steps:
1. WRITE TESTS FIRST
   - Add tests for CLI-friendly error handling
   - Test return value formats for CLI consumption
   - RUN TESTS - VERIFY THEY FAIL
2. GET APPROVAL FOR DESIGN CHOICES
   - PAUSE FOR MANUAL APPROVAL: Return value format for CLI
   - PAUSE FOR MANUAL APPROVAL: Error codes/messages for CLI
3. IMPLEMENT FUNCTIONALITY
   - Adjust functions for CLI compatibility
   - Ensure proper return values and error handling
   - RUN TESTS - VERIFY THEY PASS
4. DOCUMENT AND COMPLETE
   - Add documentation IF NEEDED in three places
   - Double check all subtask requirements are met
   - MARK COMPLETE

