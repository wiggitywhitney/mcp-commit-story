# Task ID: 11
# Title: Implement Summary Generation
# Status: pending
# Dependencies: 5, 6, 7
# Priority: medium
# Description: Create the functionality to generate daily, weekly, monthly, and yearly summaries of journal entries.
# Details:
Implement summary generation in both the MCP server and CLI with the following features:

1. Date range utilities:
```python
def get_date_range(period, date=None):
    """Get start and end dates for a period"""
    if date is None:
        date = datetime.now().date()
    elif isinstance(date, str):
        date = datetime.strptime(date, "%Y-%m-%d").date()
    
    if period == "day":
        return date, date
    elif period == "week":
        # Start of week (Monday)
        start = date - timedelta(days=date.weekday())
        end = start + timedelta(days=6)
        return start, end
    elif period == "month":
        start = date.replace(day=1)
        # Last day of month
        next_month = date.replace(day=28) + timedelta(days=4)
        end = next_month - timedelta(days=next_month.day)
        return start, end
    elif period == "year":
        start = date.replace(month=1, day=1)
        end = date.replace(month=12, day=31)
        return start, end
    else:
        raise ValueError(f"Unknown period: {period}")
```

2. Journal file collection:
```python
def get_journal_files_in_range(start_date, end_date, config):
    """Get journal files in date range"""
    files = []
    current = start_date
    while current <= end_date:
        file_path = Path(config["journal"]["path"]) / "daily" / f"{current.strftime('%Y-%m-%d')}.md"
        if file_path.exists():
            files.append(file_path)
        current += timedelta(days=1)
    return files
```

3. Summary generation:
```python
def generate_summary(files, period, config):
    """Generate summary from journal files"""
    # Extract content from files
    entries = []
    manual_reflections = []
    
    for file_path in files:
        with open(file_path, "r") as f:
            content = f.read()
            # Extract entries and reflections
            # Implementation
    
    # Generate summary sections
    summary = []
    
    # Add manual reflections section if any
    if manual_reflections:
        summary.append("# Manual Reflections\n")
        summary.append("\n".join(manual_reflections))
    
    # Add other sections
    summary.append("# Summary\n")
    # Generate overall summary
    
    summary.append("# Key Accomplishments\n")
    # Extract accomplishments
    
    summary.append("# Challenges\n")
    # Extract challenges
    
    summary.append("# Technical Decisions\n")
    # Extract decisions
    
    return "\n\n".join(summary)
```

4. Summary file saving:
```python
def save_summary(content, period, date, config):
    """Save summary to appropriate file"""
    if period == "day":
        file_name = f"{date.strftime('%Y-%m-%d')}-summary.md"
        dir_path = Path(config["journal"]["path"]) / "summaries" / "daily"
    elif period == "week":
        # Get week number
        week_num = date.isocalendar()[1]
        file_name = f"{date.strftime('%Y-%m')}-week{week_num}.md"
        dir_path = Path(config["journal"]["path"]) / "summaries" / "weekly"
    elif period == "month":
        file_name = f"{date.strftime('%Y-%m')}.md"
        dir_path = Path(config["journal"]["path"]) / "summaries" / "monthly"
    elif period == "year":
        file_name = f"{date.strftime('%Y')}.md"
        dir_path = Path(config["journal"]["path"]) / "summaries" / "yearly"
    else:
        raise ValueError(f"Unknown period: {period}")
    
    # Create directory if needed
    dir_path.mkdir(parents=True, exist_ok=True)
    
    # Save file
    file_path = dir_path / file_name
    with open(file_path, "w") as f:
        f.write(content)
    
    return file_path
```

5. MCP handler implementation:
```python
@trace_operation("journal_summarize")
async def handle_summarize(request):
    """Handle journal/summarize operation"""
    period = request.get("period", "day")
    date = request.get("date")
    date_range = request.get("range")
    
    # Load config
    config = load_config()
    
    # Get date range
    if date_range:
        # Parse range (format: "YYYY-MM-DD:YYYY-MM-DD")
        start_str, end_str = date_range.split(":")
        start_date = datetime.strptime(start_str, "%Y-%m-%d").date()
        end_date = datetime.strptime(end_str, "%Y-%m-%d").date()
    else:
        start_date, end_date = get_date_range(period, date)
    
    # Get journal files
    files = get_journal_files_in_range(start_date, end_date, config)
    if not files:
        return {"status": "error", "error": "No journal entries found in date range"}
    
    # Generate summary
    content = generate_summary(files, period, config)
    
    # Save summary
    file_path = save_summary(content, period, start_date, config)
    
    return {
        "status": "success",
        "file_path": str(file_path),
        "content": content
    }
```

6. CLI command implementation:
```python
@cli.command()
@click.option("--week", is_flag=True, help="Summarize most recent week")
@click.option("--month", is_flag=True, help="Summarize most recent month")
@click.option("--day", "--date", help="Summarize specific day (YYYY-MM-DD)")
@click.option("--range", help="Summarize date range (YYYY-MM-DD:YYYY-MM-DD)")
@click.option("--debug", is_flag=True, help="Show debug information")
def summarize(week, month, date, range, debug):
    """Generate summary for specified period"""
    try:
        # Determine period
        if week:
            period = "week"
        elif month:
            period = "month"
        else:
            period = "day"
        
        # Load config
        config = load_config()
        
        # Get date range
        if range:
            # Parse range (format: "YYYY-MM-DD:YYYY-MM-DD")
            start_str, end_str = range.split(":")
            start_date = datetime.strptime(start_str, "%Y-%m-%d").date()
            end_date = datetime.strptime(end_str, "%Y-%m-%d").date()
        else:
            start_date, end_date = get_date_range(period, date)
        
        # Get journal files
        files = get_journal_files_in_range(start_date, end_date, config)
        if not files:
            click.echo("No journal entries found in date range")
            return
        
        # Generate summary
        content = generate_summary(files, period, config)
        
        # Save summary
        file_path = save_summary(content, period, start_date, config)
        
        click.echo(f"Summary saved to {file_path}")
    except Exception as e:
        if debug:
            click.echo(f"Error: {e}")
            traceback.print_exc()
        else:
            click.echo(f"Error: {e}")
```

# Test Strategy:
1. Unit tests for date range utilities
2. Tests for journal file collection
3. Tests for summary generation
4. Tests for summary file saving
5. Tests for MCP handler implementation
6. Tests for CLI command implementation
7. Tests for handling different periods (day, week, month, year)
8. Tests for handling date ranges
9. Integration tests for full summary generation flow
