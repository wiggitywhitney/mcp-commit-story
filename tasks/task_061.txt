# Task ID: 61
# Title: Implement Composer Integration for Full Chat History Access
# Status: pending
# Dependencies: None
# Priority: high
# Description: Upgrade cursor_db to use Composer instead of aiService, providing access to complete chronologically-ordered conversation history with timestamps and session names, filtered by git commit time windows.
# Details:
This task involves replacing the current aiService implementation with Cursor's Composer system to improve chat history access:

## Required Reading Before Implementation

**READ FIRST**: `/Users/wiggitywhitney/Repos/mcp-commit-story/docs/cursor-chat-discovery.md` - explains Composer database structure
**REFERENCE**: `/Users/wiggitywhitney/Repos/mcp-commit-story/cursor_chat_sample.json` - shows real data examples

## Key Technical Details from Research

- Composer uses a two-database system:
  - Workspace database (session metadata) in `workspaceStorage/{hash}/state.vscdb`
  - Global database (actual messages) in `globalStorage/state.vscdb`
- Session metadata key: `composer.composerData` in workspace ItemTable
- Message headers key: `composerData:{composerId}` in global cursorDiskKV table
- Individual messages key: `bubbleId:{composerId}:{bubbleId}` in global cursorDiskKV table
- Messages are already chronologically ordered with timestamps

## Implementation Steps

1. Create a new module that interfaces with Composer databases:
   ```typescript
   // Example implementation
   import { Database } from 'better-sqlite3';
   import * as path from 'path';
   
   export class ComposerChatProvider {
     private workspaceDb: Database;
     private globalDb: Database;
     
     constructor(gitRepoPath: string) {
       // Auto-detect workspace based on git repository path
       const workspaceHash = this.detectWorkspaceHash(gitRepoPath);
       this.workspaceDb = new Database(path.join('workspaceStorage', workspaceHash, 'state.vscdb'));
       this.globalDb = new Database(path.join('globalStorage', 'state.vscdb'));
     }
     
     async getChatHistoryForCommit(commitTimestamp: number): Promise<ChatMessage[]> {
       // Define time window: 30 min before, 5 min after commit
       const startTime = commitTimestamp - (30 * 60 * 1000);
       const endTime = commitTimestamp + (5 * 60 * 1000);
       
       // Get session metadata from workspace DB
       const sessions = this.getSessionMetadata();
       
       // Get messages from global DB filtered by time window
       const messages = this.getMessagesInTimeWindow(sessions, startTime, endTime);
       
       return messages;
     }
     
     private getSessionMetadata() {
       const result = this.workspaceDb.prepare(
         "SELECT value FROM ItemTable WHERE key = 'composer.composerData'"
       ).get();
       
       return JSON.parse(result.value);
     }
     
     private getMessagesInTimeWindow(sessions, startTime, endTime) {
       const messages = [];
       
       for (const session of sessions) {
         // Get message headers
         const headerKey = `composerData:${session.composerId}`;
         const headerRow = this.globalDb.prepare(
           "SELECT value FROM cursorDiskKV WHERE key = ?"
         ).get(headerKey);
         
         if (!headerRow) continue;
         
         const header = JSON.parse(headerRow.value);
         
         // Get individual messages
         for (const bubbleId of header.bubbleIds) {
           const messageKey = `bubbleId:${session.composerId}:${bubbleId}`;
           const messageRow = this.globalDb.prepare(
             "SELECT value FROM cursorDiskKV WHERE key = ?"
           ).get(messageKey);
           
           if (!messageRow) continue;
           
           const message = JSON.parse(messageRow.value);
           
           // Filter by timestamp
           if (message.timestamp >= startTime && message.timestamp <= endTime) {
             messages.push({
               id: message.id,
               role: message.role,
               content: message.content,
               timestamp: message.timestamp,
               sessionName: session.name || 'Unnamed Session',
               // Add other required fields
             });
           }
         }
       }
       
       // Sort by timestamp to ensure chronological order
       return messages.sort((a, b) => a.timestamp - b.timestamp);
     }
     
     private detectWorkspaceHash(gitRepoPath: string): string {
       // Implementation to detect workspace hash based on git repository path
       // This would involve examining the workspaceStorage directory
       // and matching with the current repository
     }
   }
   ```

2. Update the cursor_db module to use the new Composer integration:
   - Replace existing aiService calls with Composer calls
   - Update data models to include timestamps and session names
   - Remove any code related to AI-based conversation reconstruction
   - Implement clear error handling if Composer databases not found

3. Update the API to maintain backward compatibility while providing new features:
   - Keep the same function signatures but enhance return data
   - Add timestamp filtering based on git commit time
   - Include session names in the returned data

4. Update tests:
   - Create new mock data based on the Composer database structure
   - Update existing tests to expect the new data format
   - Add tests for time window filtering

## Implementation Decisions (APPROVED)

- **Time Window Strategy**: Use git commit timestamp to define chat window (30 min before, 5 min after)
- **Message Filtering**: No message count limits - rely only on time windows
- **Data Richness**: Include session names from Composer (e.g., "Implement authentication")
- **Workspace Detection**: Auto-detect based on current git repository path
- **Error Handling**: Fail clearly if Composer not found (no fallback to aiService)

# Test Strategy:
1. Unit Tests:
   - Create unit tests for the new Composer integration module
   - Test edge cases like empty chats, very large chats, and malformed responses
   - Mock Composer database responses for predictable testing
   - Test time window filtering logic with various commit timestamps
   - Verify workspace detection logic with different repository paths

2. Integration Tests:
   - Test the integration between cursor_db and the Composer system
   - Verify that chat history is correctly retrieved and formatted
   - Test with real Composer databases in a staging environment
   - Verify session names are correctly included in the output

3. Regression Tests:
   - Ensure all features that previously used aiService continue to work
   - Verify that chat history access works for both recent and older conversations
   - Check that the full chronological history is correctly maintained
   - Verify time window filtering works correctly with real git commits

4. Performance Tests:
   - Measure and compare load times for chat history between old and new implementations
   - Test with large chat histories to ensure performance remains acceptable
   - Verify memory usage doesn't increase significantly
   - Test performance of SQLite queries on large Composer databases

5. Manual Testing:
   - Manually verify that the complete chat history is accessible
   - Check that the chronological ordering is correct
   - Verify that the UI correctly displays the expanded chat history
   - Test with real git commits to ensure time windows capture relevant conversations

6. Validation Criteria:
   - All chat history (not just 48 hours) is accessible
   - Messages are correctly filtered by git commit time windows
   - Session names are included in the output
   - No regression in existing functionality
   - Performance meets or exceeds previous implementation
   - All automated tests pass
   - Journal entries show richer context from complete conversations

# Subtasks:
## 1. Study Composer database structure and schema [pending]
### Dependencies: None
### Description: Read the documentation in `/Users/wiggitywhitney/Repos/mcp-commit-story/docs/cursor-chat-discovery.md` and examine sample data in `/Users/wiggitywhitney/Repos/mcp-commit-story/cursor_chat_sample.json` to understand the Composer database structure.
### Details:


## 2. Create ComposerChatProvider class [pending]
### Dependencies: None
### Description: Implement a new class that interfaces with both Composer databases (workspace and global) to extract chat history with proper timestamps and session names.
### Details:


## 3. Implement workspace detection logic [pending]
### Dependencies: None
### Description: Create a function to automatically detect the correct workspace database based on the current git repository path.
### Details:


## 4. Implement time window filtering [pending]
### Dependencies: None
### Description: Add logic to filter messages based on git commit timestamp (30 minutes before, 5 minutes after) while preserving chronological ordering.
### Details:


## 5. Update cursor_db module [pending]
### Dependencies: None
### Description: Replace aiService calls with the new ComposerChatProvider in the cursor_db module while maintaining the same API.
### Details:


## 6. Remove conversation reconstruction code [pending]
### Dependencies: None
### Description: Identify and remove any code related to AI-based conversation reconstruction that is no longer needed.
### Details:


## 7. Update data models [pending]
### Dependencies: None
### Description: Enhance data models to include timestamps and session names from Composer.
### Details:


## 8. Implement error handling [pending]
### Dependencies: None
### Description: Add clear error handling for cases where Composer databases cannot be found or accessed.
### Details:


## 9. Create mock data for tests [pending]
### Dependencies: None
### Description: Create new mock data based on the Composer database structure for use in tests.
### Details:


## 10. Update existing tests [pending]
### Dependencies: None
### Description: Update existing tests to work with the new implementation and data format.
### Details:


## 11. Add new tests for time window filtering [pending]
### Dependencies: None
### Description: Create new tests specifically for the time window filtering logic with various git commit timestamps.
### Details:


## 12. Perform integration testing [pending]
### Dependencies: None
### Description: Test the integration with real Composer databases to ensure everything works as expected.
### Details:


