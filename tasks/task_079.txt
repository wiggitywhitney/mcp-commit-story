# Task ID: 79
# Title: Fix Git Hook Environment Variable Loading and AI Failure Handling
# Status: pending
# Dependencies: None
# Priority: high
# Description: Fix the fundamental issue where git hooks fail to load environment variables (like OPENAI_API_KEY), resulting in silent AI failures and terrible journal entries. Implement automatic .env loading, better failure detection, and intelligent fallbacks to provide a smooth user experience.

# Requirements:
- [ ] Automatic .env file loading in git hook processes to eliminate manual environment setup
- [ ] Clear error messaging when AI configuration is missing
- [ ] User awareness when AI features aren't working
- [ ] Maintain graceful degradation principle while providing actionable guidance

# Notes:
## Problem Context:
The current system fails silently when OPENAI_API_KEY is not available in git hook environment, resulting in:
- Poor journal entries with no AI intelligence (like commit 57b548e in July 19's journal file)
- No indication to users why AI features aren't working
- Manual environment setup burden that creates adoption barriers
- Silent fallback to basic content without user awareness

## Design Decisions Made:
1. **Approach**: Minimal fix focusing on root cause - missing environment variables in git hook subprocess
2. **Environment Loading**: Simple python-dotenv loading in git_hook_worker.py (local .env file)
3. **Failure Detection**: Basic logging when API key missing using existing log infrastructure
4. **User Awareness**: Clear error message in journal entries when AI unavailable
5. **Fallback Strategy**: Keep existing git-based fallbacks, add status indicator
6. **Scope**: MVP solution - solve actual problem without overengineering

## Implementation Strategy:
Simple fix for the core issue: git hooks run without environment variables. Add python-dotenv loading and basic user messaging without building complex error handling infrastructure.

---

# Subtasks

## Subtask 79.1: Add Environment Variable Loading to Git Hooks
### Status: pending
### Dependencies: None
### Description: Add automatic .env file loading to git hook worker process and clear error messaging when AI configuration is missing.

#### WRITE TESTS FIRST
- Create `tests/unit/test_git_hook_env_loading.py`
- Test `load_env_for_git_hook()` function
- Test cases: .env file exists and loads correctly, .env file missing (graceful handling), malformed .env file (graceful handling), OPENAI_API_KEY detection and logging
- Test integration with git hook worker main function
- RUN TESTS - VERIFY THEY FAIL

#### IMPLEMENT FUNCTIONALITY
- Add `python-dotenv` import to `src/mcp_commit_story/git_hook_worker.py` 
- Implement `load_env_for_git_hook()` function that loads `.env` from repository root
- Call `load_env_for_git_hook()` at start of `main()` function
- Add simple logging when OPENAI_API_KEY is missing using existing `log_hook_activity()`
- Add basic telemetry: `git_hook.env_loaded` (counter) - track successful .env loading
- Handle errors gracefully - if .env loading fails, continue with existing behavior
- RUN TESTS - VERIFY THEY PASS

#### DOCUMENT AND COMPLETE
- Add function-level docstring explaining automatic .env loading for git hooks
- Update module docstring if needed
- No task references or historical processes in documentation
- Write for external readers with no project knowledge
- Run full test suite and verify no regressions
- Verify all subtask requirements met
- MARK COMPLETE

---

## Subtask 79.2: Add Clear AI Status Messaging in Journal Entries
### Status: pending
### Dependencies: 79.1
### Description: Enhance journal fallback content to include clear status messages when AI features are unavailable, providing user awareness without overengineering.

#### WRITE TESTS FIRST
- Create `tests/unit/test_ai_status_messaging.py`
- Test AI status detection in journal generation
- Test cases: AI available (normal behavior), AI unavailable with clear status message, status message formatting and placement
- Test integration with existing fallback content generation
- RUN TESTS - VERIFY THEY FAIL

#### IMPLEMENT FUNCTIONALITY
- Add simple AI availability check to `src/mcp_commit_story/journal_generate.py`
- When AI fails (returns empty string), add status line to summary section:
  `⚠️ AI features unavailable - check OPENAI_API_KEY in .env file`
- Keep existing git-based fallback content generation
- Add basic telemetry: `journal.ai_unavailable_entries` (counter) - track entries created without AI
- Handle errors gracefully - if status messaging fails, continue with existing fallbacks
- RUN TESTS - VERIFY THEY PASS

#### DOCUMENT AND COMPLETE
- Add function-level docstrings explaining AI status messaging approach
- Update relevant module documentation
- No task references or historical processes in documentation
- Write for external readers with no project knowledge
- Run full test suite and verify no regressions
- Verify all subtask requirements met
- MARK COMPLETE

---

## Subtask 79.3: Integration Testing and Documentation Updates
### Status: pending
### Dependencies: 79.1, 79.2
### Description: Test the complete environment loading and AI status messaging workflow, and update documentation to reflect automatic .env loading.

### Steps:
- Create `tests/integration/test_env_loading_integration.py`
- Test complete workflow: git hook → .env loading → AI failure scenarios → status messaging
- Test scenarios: missing .env file, missing API key, malformed .env file
- Run full test suite and verify no regressions
- Update `docs/implementation-guide.md` to mention automatic .env loading
- Update troubleshooting sections with .env file guidance
- No approval needed for documentation changes
- Follow documentation standards: external reader accessible, no task references

### Verification Checklist:
[ ] Integration test created covering complete workflow
[ ] All test scenarios pass: missing files, missing API key, malformed .env
[ ] Full test suite passes with no regressions
[ ] Documentation updated with .env loading information
[ ] Troubleshooting guidance improved
[ ] All subtask requirements verified complete
[ ] MARK COMPLETE

---

## Task Completion

Final verification:
[ ] All requirements above completed
[ ] Automatic .env file loading implemented in git hooks
[ ] Clear error messaging when AI configuration missing
[ ] User awareness when AI features unavailable
[ ] Graceful degradation maintained with actionable guidance
[ ] Full test suite passes with no regressions
[ ] Documentation updated to reflect new capabilities 