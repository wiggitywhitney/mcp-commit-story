# Task ID: 79
# Title: Fix Git Hook Environment Variable Loading and AI Failure Handling
# Status: pending
# Dependencies: None
# Priority: high
# Description: Fix the fundamental issue where git hooks fail to load environment variables (like OPENAI_API_KEY), resulting in silent AI failures and terrible journal entries. Implement automatic .env loading, better failure detection, and intelligent fallbacks to provide a smooth user experience.

# Requirements:
- Automatic .env file loading in git hook processes to eliminate manual environment setup
- Intelligent AI availability detection with clear error messaging when configuration is missing
- Better fallback content when AI is unavailable instead of basic git-only stubs with typos
- User setup guidance and status reporting when AI configuration is incomplete
- Comprehensive logging of environment and AI status for debugging
- Silent failure prevention - users should understand why AI features aren't working
- Maintain graceful degradation principle while providing actionable guidance

# Notes:
## Problem Context:
The current system fails silently when OPENAI_API_KEY is not available in git hook environment, resulting in:
- Poor journal entries with no AI intelligence (like commit 57b548e in July 19's journal file)
- No indication to users why AI features aren't working
- Manual environment setup burden that creates adoption barriers
- Silent fallback to basic content without user awareness

## Design Decisions Resolved by Codebase Patterns:
- **.env file locations**: Follow existing config precedence pattern (local .env, global ~/.mcp-commit-story.env)
- **Setup guidance location**: Use established git hook logging infrastructure (.git/hooks/mcp-commit-story.log)
- **Setup validation CLI command**: No - violates established CLI architecture (setup-only, no operational commands)
- **AI availability detection scope**: Environment check first with graceful degradation (matches existing ai_provider.py patterns)

## Design Decisions for Future Consideration:
- What level of fallback content to provide when AI is unavailable
- How to balance informative messaging with git hook performance requirements

## Implementation Strategy:
Most design decisions resolved by existing codebase patterns. Phase 2 will focus on fallback content strategy and messaging approach. Primary implementation areas:
- git_hook_worker.py: Add automatic .env loading using established config precedence patterns
- ai_provider.py: Enhance failure detection with clear error messaging
- journal_generate.py: Improve fallback content generation with setup guidance
- Leverage existing logging infrastructure and CLI architecture boundaries

---

# Subtasks

*Subtasks will be created in Phase 2 after design decisions are finalized* 