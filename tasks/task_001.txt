# Task ID: 1
# Title: Setup Project Structure and Dependencies
# Status: pending
# Dependencies: None
# Priority: high
# Description: Initialize the project repository with the required directory structure and dependencies as specified in the PRD.
# Details:
Create the project structure with the following components:

1. Create directory structure:
```
mcp-journal/
├── src/
│   └── mcp_journal/
│       ├── __init__.py
│       ├── cli.py
│       ├── server.py
│       ├── journal.py
│       ├── git_utils.py
│       ├── telemetry.py
│       └── config.py
├── tests/
│   ├── unit/
│   ├── integration/
│   └── fixtures/
├── pyproject.toml
├── README.md
└── .mcp-journalrc.yaml
```

2. Set up pyproject.toml with dependencies:
```toml
[tool.poetry]
name = "mcp-journal"
version = "0.1.0"
description = "MCP server for engineering journal entries"
authors = ["Your Name <your.email@example.com>"]

[tool.poetry.dependencies]
python = "^3.9"
mcp = "^1.0.0"
click = "^8.0.0"
pyyaml = "^6.0"
gitpython = "^3.1.0"
python-dateutil = "^2.8.0"
opentelemetry-api = "^1.15.0"
opentelemetry-sdk = "^1.15.0"
opentelemetry-exporter-otlp = "^1.15.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-mock = "^3.10.0"
pytest-cov = "^4.0.0"
pytest-watch = "^4.2.0"
black = "^23.0.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"

[tool.poetry.scripts]
mcp-journal = "mcp_journal.cli:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
```

3. Create a basic README.md with project overview
4. Initialize a default .mcp-journalrc.yaml configuration file

# Test Strategy:
1. Verify the project structure is created correctly
2. Ensure all dependencies can be installed
3. Validate the pyproject.toml file structure
4. Check that the package can be installed in development mode
5. Verify the CLI entry point is properly registered
