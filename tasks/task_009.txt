# Task ID: 9
# Title: Implement Journal Entry Creation
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create the functionality to generate and save journal entries for Git commits, including context collection and formatting.
# Details:
Implement journal entry creation in the MCP server with the following features:

1. Entry generation workflow:
```python
def generate_journal_entry(commit, config, debug=False):
    """Generate a journal entry for a commit"""
    # Skip if journal-only commit
    if is_journal_only_commit(commit, config["journal"]["path"]):
        if debug:
            print("Skipping journal-only commit")
        return None
    
    # Collect context
    context = {}
    if config["journal"]["include_terminal"]:
        try:
            context["terminal"] = collect_terminal_history(commit.committed_date)
        except Exception as e:
            if debug:
                print(f"Error collecting terminal history: {e}")
    
    if config["journal"]["include_chat"]:
        try:
            context["chat"] = collect_chat_history(commit)
        except Exception as e:
            if debug:
                print(f"Error collecting chat history: {e}")
    
    # Generate entry
    entry = JournalEntry(commit, config)
    entry.generate_sections(context)
    
    return entry
```

2. File saving:
```python
def save_journal_entry(entry, config):
    """Save journal entry to appropriate file"""
    date = entry.timestamp.strftime("%Y-%m-%d")
    file_path = Path(config["journal"]["path"]) / "daily" / f"{date}.md"
    
    # Create directory if needed
    file_path.parent.mkdir(parents=True, exist_ok=True)
    
    # Append to file
    with open(file_path, "a") as f:
        f.write("\n\n" + entry.to_markdown())
    
    return file_path
```

3. MCP handler implementation:
```python
@trace_operation("journal_entry_creation")
async def handle_journal_entry_creation(request):
    """Handle journal entry creation operation"""
    debug = request.get("debug", False)
    
    # Load config
    config = load_config()
    
    # Get current commit
    repo = get_repo()
    commit = get_current_commit(repo)
    
    # Generate entry
    entry = generate_journal_entry(commit, config, debug)
    if not entry:
        return {"status": "skipped", "reason": "Journal-only commit"}
    
    # Save entry
    file_path = save_journal_entry(entry, config)
    
    # Check for auto-summarize
    if config["journal"]["auto_summarize"]["daily"]:
        # Check if first commit of day
        # Implementation
    
    return {
        "status": "success",
        "file_path": str(file_path),
        "entry": entry.to_markdown()
    }
```

Note: All operational journal entry and reflection tasks are handled by the MCP server and AI agent. The CLI commands are limited to setup functionality (journal-init, install-hook). The post-commit hook will call the MCP server endpoint for journal entry creation, which will be handled by the AI agent.

# Test Strategy:
1. Unit tests for entry generation workflow
2. Tests for file saving
3. Tests for MCP handler implementation
4. Tests for journal-only commit detection
5. Tests for context collection
6. Integration tests for full entry creation flow via MCP server
7. Tests for post-commit hook functionality

# Subtasks:
## 1. Implement Journal Entry Generation Workflow [done]
### Dependencies: None
### Description: Create generate_journal_entry() function that orchestrates all context collection and section generation functions
### Details:
# Task 9: Implement Journal Entry Creation - Detailed Subtask Plan

## Subtask 9.1: Implement Journal Entry Generation Workflow
**Objective**: Create generate_journal_entry() function that orchestrates all context collection and section generation functions to build complete journal entries from commit data.

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Create `tests/unit/test_journal_entry_generation.py`
   - Test `generate_journal_entry(commit, config, debug=False)` function
   - Test cases: successful entry generation with all sections, journal-only commit detection and skipping, context collection integration (collect_chat_history, collect_ai_terminal_commands, collect_git_context), section generation integration (all 8 generate_*_section functions), graceful degradation when individual functions fail, configuration-driven section inclusion/exclusion, debug mode output validation
   - Test `is_journal_only_commit(commit, journal_path)` helper function
   - Test integration with existing JournalEntry and JournalContext classes
   - **RUN TESTS - VERIFY THEY FAIL**

2. **GET APPROVAL FOR DESIGN CHOICES**
   - **PAUSE FOR MANUAL APPROVAL**: Header format consistency (match reflection headers or create new format)
   - **PAUSE FOR MANUAL APPROVAL**: Section ordering and organization in final journal entry
   - **PAUSE FOR MANUAL APPROVAL**: Configuration schema for enabling/disabling individual sections
   - **PAUSE FOR MANUAL APPROVAL**: Graceful degradation strategy (skip failed sections vs include error placeholder)
   - **PAUSE FOR MANUAL APPROVAL**: Journal-only commit detection criteria

3. **IMPLEMENT FUNCTIONALITY**
   - Implement `generate_journal_entry()` in `src/mcp_commit_story/journal.py`
   - Create `is_journal_only_commit()` helper function
   - Integrate ALL context collection functions: collect_chat_history(), collect_ai_terminal_commands(), collect_git_context()
   - Orchestrate ALL section generators: generate_summary_section(), generate_technical_synopsis_section(), generate_accomplishments_section(), generate_frustrations_section(), generate_tone_mood_section(), generate_discussion_notes_section(), generate_terminal_commands_section(), generate_commit_metadata_section()
   - Implement graceful degradation: catch individual function errors, log them, continue with other sections
   - Build complete JournalContext from all collected context
   - Ensure compatibility with existing JournalEntry class
   - **RUN TESTS - VERIFY THEY PASS**

4. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places:
     1. **Docs directory**: Update journal entry generation workflow documentation
     2. **PRD**: Update automated journal creation features
     3. **Engineering Spec**: Update workflow implementation details and make sure TOC is current
   - **Do not remove existing information unless it's incorrect**
   - **No approval needed** - make documentation edits directly
   - **Run the entire test suite and make sure all tests are passing**
   - **Make sure pyproject.toml is updated as needed**
   - Double check all subtask requirements are met before marking this subtask as complete
   - **MARK COMPLETE**
<info added on 2025-06-03T21:22:39.418Z>
# Task 9.2: Implement Journal Entry File Operations

## Objective
Create functions to handle file operations for journal entries, including saving entries to disk, managing file paths, and handling file-related errors.

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Create `tests/unit/test_journal_file_operations.py`
   - Test `save_journal_entry(entry, config, debug=False)` function
   - Test `get_journal_file_path(commit_hash, config)` helper function
   - Test `ensure_journal_directory_exists(config)` helper function
   - Test cases: successful file saving, directory creation, path generation with various configurations, error handling for file operations, debug mode behavior
   - **RUN TESTS - VERIFY THEY FAIL**

2. **GET APPROVAL FOR DESIGN CHOICES**
   - **PAUSE FOR MANUAL APPROVAL**: File naming convention (date-based vs. commit-hash-based)
   - **PAUSE FOR MANUAL APPROVAL**: Directory structure for journal entries
   - **PAUSE FOR MANUAL APPROVAL**: File format (markdown vs. other formats)
   - **PAUSE FOR MANUAL APPROVAL**: Error handling strategy for file operations
   - **PAUSE FOR MANUAL APPROVAL**: Backup strategy for existing files

3. **IMPLEMENT FUNCTIONALITY**
   - Implement `save_journal_entry()` in appropriate module (likely journal_workflow.py)
   - Create `get_journal_file_path()` helper function
   - Create `ensure_journal_directory_exists()` helper function
   - Implement file operation error handling with appropriate logging
   - Ensure compatibility with the JournalEntry class from subtask 9.1
   - Integrate with configuration system for customizable paths
   - **RUN TESTS - VERIFY THEY PASS**

4. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places:
     1. **Docs directory**: Update journal file operations documentation
     2. **PRD**: Update file handling features
     3. **Engineering Spec**: Update file operations implementation details
   - **Do not remove existing information unless it's incorrect**
   - **No approval needed** - make documentation edits directly
   - **Run the entire test suite and make sure all tests are passing**
   - **Make sure pyproject.toml is updated as needed**
   - Double check all subtask requirements are met before marking this subtask as complete
   - **MARK COMPLETE**
</info added on 2025-06-03T21:22:39.418Z>

## 2. Implement Journal Entry File Operations [pending]
### Dependencies: None
### Description: Create save_journal_entry() function for writing journal entries to daily files using existing utilities
### Details:
## Subtask 9.2: Implement Journal Entry File Operations
**Objective**: Create save_journal_entry() function that handles writing journal entries to daily journal files using existing utilities.

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Create `tests/unit/test_journal_file_operations.py`
   - Test `save_journal_entry(entry, config)` function
   - Test cases: successful save to daily file, file creation when doesn't exist, proper entry formatting and separation, integration with existing append_to_journal_file() utility, error handling for file permission issues, directory creation when needed
   - Test daily file naming convention (YYYY-MM-DD.md format)
   - Test entry separation and formatting consistency
   - **RUN TESTS - VERIFY THEY FAIL**

2. **GET APPROVAL FOR DESIGN CHOICES**
   - **PAUSE FOR MANUAL APPROVAL**: File naming convention consistency with existing journal files
   - **PAUSE FOR MANUAL APPROVAL**: Entry separation format (newlines, headers, dividers)
   - **PAUSE FOR MANUAL APPROVAL**: Directory structure and organization
   - **PAUSE FOR MANUAL APPROVAL**: Integration approach with existing append_to_journal_file() function

3. **IMPLEMENT FUNCTIONALITY**
   - Implement `save_journal_entry()` in `src/mcp_commit_story/journal.py`
   - Use existing `append_to_journal_file()` utility from journal.py
   - Handle daily file management with proper formatting
   - Ensure consistent entry separation and structure
   - Add proper error handling for file operations
   - Create directories as needed
   - **RUN TESTS - VERIFY THEY PASS**

4. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places:
     1. **Docs directory**: Update journal file operations documentation
     2. **PRD**: Update file management features
     3. **Engineering Spec**: Update file operation implementation details and make sure TOC is current
   - **Do not remove existing information unless it's incorrect**
   - **No approval needed** - make documentation edits directly
   - **Run the entire test suite and make sure all tests are passing**
   - **Make sure pyproject.toml is updated as needed**
   - Double check all subtask requirements are met before marking this subtask as complete
   - **MARK COMPLETE**

## 3. Implement MCP Journal Entry Creation Handler [pending]
### Dependencies: 9.1, 9.2
### Description: Create handle_journal_entry_creation() MCP function that integrates generation and file operations
### Details:
## Subtask 9.3: Implement MCP Journal Entry Creation Handler
**Objective**: Create handle_journal_entry_creation() function that integrates journal entry generation and file operations into the MCP server.

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Create `tests/unit/test_mcp_journal_handler.py`
   - Test `handle_journal_entry_creation(request)` function with @trace_operation decorator
   - Test cases: successful journal entry creation end-to-end, MCP request schema validation, git operations integration, auto-summarize integration when configured, error handling for missing commits, telemetry integration with proper span creation
   - Test MCP response format compliance
   - Test integration with existing git utilities
   - **RUN TESTS - VERIFY THEY FAIL**

2. **GET APPROVAL FOR DESIGN CHOICES**
   - **PAUSE FOR MANUAL APPROVAL**: MCP request schema structure (commit_hash, config overrides, etc.)
   - **PAUSE FOR MANUAL APPROVAL**: MCP response format (success/error structure, included data)
   - **PAUSE FOR MANUAL APPROVAL**: Auto-summarize integration approach and configuration
   - **PAUSE FOR MANUAL APPROVAL**: Telemetry span naming and attribute structure

3. **IMPLEMENT FUNCTIONALITY**
   - Implement `handle_journal_entry_creation()` in appropriate MCP handler module
   - Add @trace_operation decorator for telemetry integration
   - Integrate with generate_journal_entry() from subtask 9.1
   - Integrate with save_journal_entry() from subtask 9.2
   - Add proper MCP request/response handling
   - Implement git operations integration
   - Add auto-summarize integration when configured
   - Ensure proper error handling and status reporting
   - **RUN TESTS - VERIFY THEY PASS**

4. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places:
     1. **Docs directory**: Update MCP integration documentation
     2. **PRD**: Update journal creation workflow features
     3. **Engineering Spec**: Update MCP handler implementation details and make sure TOC is current
   - **Do not remove existing information unless it's incorrect**
   - **No approval needed** - make documentation edits directly
   - **Run the entire test suite and make sure all tests are passing**
   - **Make sure pyproject.toml is updated as needed**
   - Double check all subtask requirements are met before marking this subtask as complete
   - **MARK COMPLETE**

