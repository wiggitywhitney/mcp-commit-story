# Task ID: 9
# Title: Implement Journal Entry Creation
# Status: pending
# Dependencies: 5, 6, 10
# Priority: high
# Description: Create the functionality to generate and save journal entries for Git commits, including context collection and formatting.
# Details:
Implement journal entry creation in the MCP server with the following features:

1. Entry generation workflow:
```python
def generate_journal_entry(commit, config, debug=False):
    """Generate a journal entry for a commit"""
    # Skip if journal-only commit
    if is_journal_only_commit(commit, config["journal"]["path"]):
        if debug:
            print("Skipping journal-only commit")
        return None
    
    # Collect context
    context = {}
    if config["journal"]["include_terminal"]:
        try:
            context["terminal"] = collect_terminal_history(commit.committed_date)
        except Exception as e:
            if debug:
                print(f"Error collecting terminal history: {e}")
    
    if config["journal"]["include_chat"]:
        try:
            context["chat"] = collect_chat_history(commit)
        except Exception as e:
            if debug:
                print(f"Error collecting chat history: {e}")
    
    # Generate entry
    entry = JournalEntry(commit, config)
    entry.generate_sections(context)
    
    return entry
```

2. File saving:
```python
def save_journal_entry(entry, config):
    """Save journal entry to appropriate file"""
    date = entry.timestamp.strftime("%Y-%m-%d")
    file_path = Path(config["journal"]["path"]) / "daily" / f"{date}.md"
    
    # Create directory if needed
    file_path.parent.mkdir(parents=True, exist_ok=True)
    
    # Append to file
    with open(file_path, "a") as f:
        f.write("\n\n" + entry.to_markdown())
    
    return file_path
```

3. MCP handler implementation:
```python
@trace_operation("journal_entry_creation")
async def handle_journal_entry_creation(request):
    """Handle journal entry creation operation"""
    debug = request.get("debug", False)
    
    # Load config
    config = load_config()
    
    # Get current commit
    repo = get_repo()
    commit = get_current_commit(repo)
    
    # Generate entry
    entry = generate_journal_entry(commit, config, debug)
    if not entry:
        return {"status": "skipped", "reason": "Journal-only commit"}
    
    # Save entry
    file_path = save_journal_entry(entry, config)
    
    # Check for auto-summarize
    if config["journal"]["auto_summarize"]["daily"]:
        # Check if first commit of day
        # Implementation
    
    return {
        "status": "success",
        "file_path": str(file_path),
        "entry": entry.to_markdown()
    }
```

Note: All operational journal entry and reflection tasks are handled by the MCP server and AI agent. The CLI commands are limited to setup functionality (journal-init, install-hook). The post-commit hook will call the MCP server endpoint for journal entry creation, which will be handled by the AI agent.

# Test Strategy:
1. Unit tests for entry generation workflow
2. Tests for file saving
3. Tests for MCP handler implementation
4. Tests for journal-only commit detection
5. Tests for context collection
6. Integration tests for full entry creation flow via MCP server
7. Tests for post-commit hook functionality

# Subtasks:
## 1. Install Simple Post-Commit Hook [pending]
### Dependencies: None
### Description: Install a basic post-commit hook that automatically triggers journal entry creation after each commit.
### Details:
Create a simple post-commit hook installation function that:
1. Writes a basic shell script to .git/hooks/post-commit
2. Makes the hook executable
3. Hook content: calls the MCP server endpoint for journal entry creation
4. No backup/restore logic (keep it simple for MVP)
5. No auto-summarization triggers
6. Basic error handling for missing .git directory

## 2. Implement Journal Initialization CLI Command [pending]
### Dependencies: None
### Description: Create the journal-init CLI command to set up the initial journal structure and configuration.
### Details:
Implement the journal-init command that:
1. Creates the necessary directory structure for the journal
2. Sets up initial configuration values
3. Validates the journal path
4. Provides helpful output to the user
5. Includes appropriate error handling

