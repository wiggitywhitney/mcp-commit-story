# Task 10: Implement Manual Reflection Addition - Detailed Subtask Plan

## Overview
Breaking down Task 10 into focused subtasks for implementing manual reflection addition through the MCP server. This plan follows MCP-first architecture with AI agent integration and on-demand directory creation patterns.

---

## Subtask 10.1: Research & Design Decision
**Objective**: Research and decide between MCP prompt vs tool approaches for manual reflection addition

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Create `tests/unit/test_reflection_research.py`
   - Test cases: mock UX scenarios for prompt approach, tool approach, both approaches
   - Test integration complexity scenarios
   - Test AI agent workflow integration patterns
   - **RUN TESTS - VERIFY THEY FAIL**

2. **GET APPROVAL FOR DESIGN CHOICES**
   - **PAUSE FOR MANUAL APPROVAL**: MCP prompt approach (natural language interface) vs MCP tool approach (structured function call)
   - **PAUSE FOR MANUAL APPROVAL**: Whether to implement both approaches or choose one
   - **PAUSE FOR MANUAL APPROVAL**: AI agent integration patterns and workflow considerations
   - **PAUSE FOR MANUAL APPROVAL**: Alignment with MCP-first architecture principles

3. **IMPLEMENT FUNCTIONALITY**
   - Create `docs/reflection-implementation-decision.md`
   - Document UX analysis for each approach
   - Document technical complexity comparison
   - Document AI agent integration considerations
   - Create final implementation decision with rationale
   - **RUN TESTS - VERIFY THEY PASS**

4. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places:
     1. **Docs directory**: Create reflection-implementation-decision.md with research findings
     2. **PRD**: Update with chosen approach and user interaction patterns
     3. **Engineering Spec**: Update with architectural decision and implementation approach and make sure TOC is current
   - **Do not remove existing information unless it's incorrect**
   - **No approval needed** - make documentation edits directly
   - **Run the entire test suite and make sure all tests are passing**
   - **Make sure pyproject.toml is updated as needed**
   - Double check all subtask requirements are met before marking this subtask as complete
   - **MARK COMPLETE**

---

## Subtask 10.2: Core Reflection Implementation
**Objective**: Implement core reflection functionality with on-demand directory creation

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Create `tests/unit/test_reflection_core.py`
   - Test `ensure_journal_directory(file_path)` utility function
   - Test `format_reflection(text)` with timestamp formatting
   - Test `add_reflection_to_journal(text, config)` function
   - Test cases: new journal file creation, appending to existing file, directory creation, error handling
   - **RUN TESTS - VERIFY THEY FAIL**

2. **GET APPROVAL FOR DESIGN CHOICES**
   - **PAUSE FOR MANUAL APPROVAL**: Reflection timestamp format (12-hour vs 24-hour)
   - **PAUSE FOR MANUAL APPROVAL**: File path structure for reflections (separate section vs inline)
   - **PAUSE FOR MANUAL APPROVAL**: Error handling strategy for file operations

3. **IMPLEMENT FUNCTIONALITY**
   - Create `src/mcp_commit_story/reflection.py`
   - Implement `ensure_journal_directory(file_path)` utility
   - Implement `format_reflection(text)` with proper timestamp
   - Implement `add_reflection_to_journal(text, config)` function
   - Add proper error handling and logging
   - **RUN TESTS - VERIFY THEY PASS**

4. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places:
     1. **Docs directory**: Update reflection usage guide in docs/
     2. **PRD**: Update with reflection functionality description
     3. **Engineering Spec**: Update with reflection implementation details and make sure TOC is current
   - **Do not remove existing information unless it's incorrect**
   - **No approval needed** - make documentation edits directly
   - **Run the entire test suite and make sure all tests are passing**
   - **Make sure pyproject.toml is updated as needed**
   - Double check all subtask requirements are met before marking this subtask as complete
   - **MARK COMPLETE**

---

## Subtask 10.3: MCP Handler Implementation
**Objective**: Implement MCP server handler for reflection operations based on research decision

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Create `tests/unit/test_reflection_mcp.py`
   - Test MCP handler function (tool or prompt based on 10.1 decision)
   - Test `handle_add_reflection(request)` function
   - Test cases: valid reflection text, empty text, invalid config, file operation errors
   - Test telemetry integration with @trace_operation decorator
   - **RUN TESTS - VERIFY THEY FAIL**

2. **GET APPROVAL FOR DESIGN CHOICES**
   - **PAUSE FOR MANUAL APPROVAL**: MCP handler request/response schema design
   - **PAUSE FOR MANUAL APPROVAL**: Integration with existing MCP server architecture
   - **PAUSE FOR MANUAL APPROVAL**: Telemetry attributes for reflection operations

3. **IMPLEMENT FUNCTIONALITY**
   - Update `src/mcp_commit_story/mcp_server.py` with reflection handler
   - Implement `handle_add_reflection(request)` function
   - Add proper MCP operation registration
   - Integrate with telemetry using @trace_operation decorator
   - Add proper error handling and response formatting
   - **RUN TESTS - VERIFY THEY PASS**

4. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places:
     1. **Docs directory**: Update MCP operation documentation with reflection examples
     2. **PRD**: Update with MCP reflection operation capabilities
     3. **Engineering Spec**: Update with MCP handler implementation details and make sure TOC is current
   - **Do not remove existing information unless it's incorrect**
   - **No approval needed** - make documentation edits directly
   - **Run the entire test suite and make sure all tests are passing**
   - **Make sure pyproject.toml is updated as needed**
   - Double check all subtask requirements are met before marking this subtask as complete
   - **MARK COMPLETE**

---

## Subtask 10.4: Comprehensive Testing & Integration
**Objective**: Create comprehensive test suite for reflection functionality and AI agent integration

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Create `tests/integration/test_reflection_integration.py`
   - Test end-to-end reflection addition via MCP server
   - Test AI agent interaction with reflection operations
   - Test on-demand directory creation compliance
   - Test cases: full MCP flow, directory creation, file operations, error scenarios
   - **RUN TESTS - VERIFY THEY FAIL**

2. **IMPLEMENT FUNCTIONALITY**
   - Create integration tests for full reflection workflow
   - Test directory creation patterns match docs/on-demand-directory-pattern.md
   - Add AI agent simulation tests
   - Verify telemetry data collection during operations
   - **RUN TESTS - VERIFY THEY PASS**

3. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places:
     1. **Docs directory**: Update testing documentation with reflection test patterns
     2. **PRD**: Update if adding user-facing testing features
     3. **Engineering Spec**: Update with testing implementation details and make sure TOC is current
   - **Do not remove existing information unless it's incorrect**
   - **No approval needed** - make documentation edits directly
   - **Run the entire test suite and make sure all tests are passing**
   - **Make sure pyproject.toml is updated as needed**
   - Double check all subtask requirements are met before marking this subtask as complete
   - **MARK COMPLETE**

---

## Subtask 10.5: CLI Verification & Limitations
**Objective**: Verify CLI is limited to setup commands and has no operational reflection commands

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Create `tests/unit/test_cli_limitations.py`
   - Test CLI command list only includes setup commands (journal-init, install-hook)
   - Test no operational commands exist (add-reflection, etc.)
   - Test CLI help output validation
   - Test cases: available commands, missing operational commands, help text accuracy
   - **RUN TESTS - VERIFY THEY FAIL**

2. **IMPLEMENT FUNCTIONALITY**
   - Review existing `src/mcp_commit_story/cli.py`
   - Verify only setup commands are exposed
   - Remove any operational commands if they exist
   - Update help text to clarify MCP-only operational features
   - **RUN TESTS - VERIFY THEY PASS**

3. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places:
     1. **Docs directory**: Update CLI documentation to clarify setup-only nature
     2. **PRD**: Update with CLI limitations and MCP operation patterns
     3. **Engineering Spec**: Update with CLI architecture decisions and make sure TOC is current
   - **Do not remove existing information unless it's incorrect**
   - **No approval needed** - make documentation edits directly
   - **Run the entire test suite and make sure all tests are passing**
   - **Make sure pyproject.toml is updated as needed**
   - Double check all subtask requirements are met before marking this subtask as complete
   - **MARK COMPLETE**

---

## Subtask 10.6: Documentation Updates & Code Review
**Objective**: Complete documentation updates and review all file operations for pattern compliance

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Create `tests/unit/test_file_operation_compliance.py`
   - Test all file-writing operations call ensure_journal_directory before writing
   - Test no code creates directories upfront
   - Test compliance with docs/on-demand-directory-pattern.md
   - Test cases: reflection operations, existing file operations, pattern compliance
   - **RUN TESTS - VERIFY THEY FAIL**

2. **IMPLEMENT FUNCTIONALITY**
   - Review all file operations in codebase for pattern compliance
   - Update any operations that don't follow on-demand directory creation
   - Ensure all operations call ensure_journal_directory before writing
   - Update documentation for final reflection implementation
   - **RUN TESTS - VERIFY THEY PASS**

3. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places:
     1. **Docs directory**: Update README.md and reflection documentation for final implementation
     2. **PRD**: Update with complete reflection functionality description
     3. **Engineering Spec**: Update with final implementation details and make sure TOC is current
   - **Do not remove existing information unless it's incorrect**
   - **No approval needed** - make documentation edits directly
   - **Run the entire test suite and make sure all tests are passing**
   - **Make sure pyproject.toml is updated as needed**
   - Double check all subtask requirements are met before marking this subtask as complete
   - **MARK COMPLETE** 