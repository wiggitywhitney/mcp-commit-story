# Task 8: Journal Initialization - Detailed Subtask Plan

*This is a concrete example of using the subtask planning template*

## Subtask 8.1: Directory Structure Creation
**Objective**: Create journal directory structure functionality

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Create `tests/unit/test_journal_init.py`
   - Test `create_journal_directories(base_path)` function
   - Test cases: success, directory exists, permission errors, invalid paths
   - **RUN TESTS - VERIFY THEY FAIL**

2. **GET APPROVAL FOR DESIGN CHOICES**
   - **PAUSE FOR MANUAL APPROVAL**: Directory structure layout
   - **PAUSE FOR MANUAL APPROVAL**: Error handling approach
   - **PAUSE FOR MANUAL APPROVAL**: Path validation strategy

3. **IMPLEMENT FUNCTIONALITY**
   - Implement `create_journal_directories()` in `src/mcp_commit_story/journal_init.py`
   - Handle all error cases identified in tests
   - **RUN TESTS - VERIFY THEY PASS**

4. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places:
     1. To docs directory (new file or existing - use judgment)
     2. PRD 
     3. Engineering Spec
   - Double check all subtask requirements are met
   - **MARK COMPLETE**

---

## Subtask 8.2: Configuration File Generation
**Objective**: Generate default configuration files

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Add tests to `tests/unit/test_journal_init.py`
   - Test `generate_default_config()` function
   - Test cases: new config, existing config, malformed files, backup scenarios
   - **RUN TESTS - VERIFY THEY FAIL**

2. **GET APPROVAL FOR DESIGN CHOICES**
   - **PAUSE FOR MANUAL APPROVAL**: Config file naming convention
   - **PAUSE FOR MANUAL APPROVAL**: Backup strategy for existing configs
   - **PAUSE FOR MANUAL APPROVAL**: Default values to include

3. **IMPLEMENT FUNCTIONALITY**
   - Implement `generate_default_config()` 
   - Integrate with existing config system
   - **RUN TESTS - VERIFY THEY PASS**

4. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places
   - Double check all subtask requirements are met
   - **MARK COMPLETE**

---

## Subtask 8.3: Git Repository Validation
**Objective**: Validate git repository before initialization

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Add tests to `tests/unit/test_journal_init.py`
   - Test `validate_git_repository()` function  
   - Test cases: valid repo, not a repo, bare repo, permission issues
   - **RUN TESTS - VERIFY THEY FAIL**

2. **GET APPROVAL FOR DESIGN CHOICES**
   - **PAUSE FOR MANUAL APPROVAL**: Validation criteria (bare repos OK?)
   - **PAUSE FOR MANUAL APPROVAL**: Error message format
   - **PAUSE FOR MANUAL APPROVAL**: Integration with existing git utils

3. **IMPLEMENT FUNCTIONALITY**
   - Implement `validate_git_repository()`
   - Use existing git_utils where possible
   - **RUN TESTS - VERIFY THEY PASS**

4. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places
   - Double check all subtask requirements are met
   - **MARK COMPLETE**

---

## Subtask 8.4: Main Initialization Function
**Objective**: Create main journal initialization entry point

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Add tests to `tests/unit/test_journal_init.py`
   - Test `initialize_journal()` function (orchestrates all previous functions)
   - Test cases: full success, partial failures, already initialized, rollback scenarios
   - **RUN TESTS - VERIFY THEY FAIL**

2. **GET APPROVAL FOR DESIGN CHOICES**
   - **PAUSE FOR MANUAL APPROVAL**: Function signature and parameters
   - **PAUSE FOR MANUAL APPROVAL**: Rollback strategy on failure
   - **PAUSE FOR MANUAL APPROVAL**: "Already initialized" detection logic

3. **IMPLEMENT FUNCTIONALITY**
   - Implement `initialize_journal()` main function
   - Orchestrate all previous subtask functions
   - **RUN TESTS - VERIFY THEY PASS**

4. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places
   - Double check all subtask requirements are met
   - **MARK COMPLETE**

---

## Subtask 8.5: Integration Testing
**Objective**: End-to-end testing of journal initialization

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Create `tests/integration/test_journal_init_integration.py`
   - Test full initialization workflow in temporary directories
   - Test cases: clean init, re-init, init with existing files, failure recovery
   - **RUN TESTS - VERIFY THEY FAIL**

2. **NO APPROVAL NEEDED** (integration testing)

3. **IMPLEMENT FUNCTIONALITY**
   - Fix any integration issues discovered
   - Ensure all components work together
   - **RUN TESTS - VERIFY THEY PASS**

4. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places
   - Double check all subtask requirements are met
   - **MARK COMPLETE**

---

## Subtask 8.6: CLI Integration Preparation
**Objective**: Prepare for CLI command integration (Task 7)

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Add tests for CLI-friendly error handling
   - Test return value formats for CLI consumption
   - **RUN TESTS - VERIFY THEY FAIL**

2. **GET APPROVAL FOR DESIGN CHOICES**
   - **PAUSE FOR MANUAL APPROVAL**: Return value format for CLI
   - **PAUSE FOR MANUAL APPROVAL**: Error codes/messages for CLI

3. **IMPLEMENT FUNCTIONALITY**
   - Adjust functions for CLI compatibility
   - Ensure proper return values and error handling
   - **RUN TESTS - VERIFY THEY PASS**

4. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places
   - Double check all subtask requirements are met
   - **MARK COMPLETE**