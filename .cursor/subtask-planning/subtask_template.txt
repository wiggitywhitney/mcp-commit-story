# Task [NUMBER]: [TASK_NAME] - Detailed Subtask Plan

## Subtask [NUMBER.1]: [SUBTASK_NAME]
**Objective**: [Clear one-sentence description of what this subtask accomplishes]

### TDD Steps:
1. **WRITE TESTS FIRST**
   - Create `tests/[unit|integration]/test_[module_name].py`
   - Test `[function_name]()` function
   - Test cases: [list specific test scenarios - success, failures, edge cases]
   - **RUN TESTS - VERIFY THEY FAIL**

2. **GET APPROVAL FOR DESIGN CHOICES** *(Include this section only if design decisions are needed)*
   - **PAUSE FOR MANUAL APPROVAL**: [Specific design choice 1]
   - **PAUSE FOR MANUAL APPROVAL**: [Specific design choice 2]
   - **PAUSE FOR MANUAL APPROVAL**: [Specific design choice 3]

3. **IMPLEMENT FUNCTIONALITY**
   - Implement `[function_name]()` in `src/[module_path]/[file_name].py`
   - Handle all error cases identified in tests
   - **RUN TESTS - VERIFY THEY PASS**

4. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places:
     1. **Docs directory**: Does a new file need to be created or would more info go in an existing file? Do what feels appropriate. Is this type of documentation needed at all? Consider user guides, API docs, or technical explanations.
     2. **PRD**: Update product requirements to reflect new capabilities, user-facing features, or system behavior changes
     3. **Engineering Spec**: Update technical implementation details, architecture notes, and add to TOC if needed
   - **Do not remove existing information unless it's incorrect**
   - **No approval needed** - make documentation edits directly
   - **Run the entire test suite and make sure all tests are passing**
   - **Make sure pyproject.toml is updated as needed**
   - Double check all subtask requirements are met before marking this subtask as complete
   - **MARK COMPLETE**

---

## Subtask [NUMBER.2]: [NEXT_SUBTASK_NAME]
**Objective**: [Description]

### TDD Steps:
1. **WRITE TESTS FIRST**
   - [Test details]
   - **RUN TESTS - VERIFY THEY FAIL**

2. **GET APPROVAL FOR DESIGN CHOICES** *(Optional section)*
   - **PAUSE FOR MANUAL APPROVAL**: [Design choice if needed]

3. **IMPLEMENT FUNCTIONALITY**
   - [Implementation details]
   - **RUN TESTS - VERIFY THEY PASS**

4. **DOCUMENT AND COMPLETE**
   - Add documentation IF NEEDED in three places:
     1. **Docs directory**: New file or existing file? What feels appropriate?
     2. **PRD**: Update requirements for user-facing changes  
     3. **Engineering Spec**: Update technical details and TOC if needed
   - **Do not remove existing information unless it's incorrect**
   - **No approval needed** - make edits directly
   - **Run the entire test suite and make sure all tests are passing**
   - **Make sure pyproject.toml is updated as needed**
   - Double check all subtask requirements are met before marking this subtask as complete
   - **MARK COMPLETE**

---

## Template Usage Notes

### When to Include "GET APPROVAL FOR DESIGN CHOICES"
- Include this section when the subtask involves significant architectural decisions
- Include when multiple valid approaches exist and choice affects future work
- Include when integration points with existing systems need clarification
- **Omit** this section for straightforward implementation tasks

### Test Categories to Consider
- **Success cases**: Normal operation with valid inputs
- **Error cases**: Invalid inputs, missing dependencies, permission issues
- **Edge cases**: Boundary conditions, empty inputs, large datasets
- **Integration cases**: How it works with existing components

### Implementation Tips
- Start with the simplest possible implementation that passes tests
- Add complexity only as needed
- Follow existing project patterns and conventions
- Ensure proper error handling and logging

### Documentation Guidelines
- **Docs directory**: Add new files for major features that need user-facing documentation, API references, or technical guides. Update existing files for enhancements to covered topics. Ask yourself: "Do users or future developers need this explained?" If the answer is no, skip this section.
- **PRD**: Update product requirements and user stories when adding user-facing capabilities, changing system behavior, or introducing new features that affect the product vision
- **Engineering Spec**: Always update for technical implementation details, architectural changes, new modules, or modifications to existing system design. Update the TOC if adding new major sections.
- **Golden rule**: Don't remove existing information unless it's factually incorrect
- **Efficiency**: Make edits directly without seeking approval - use your best judgment