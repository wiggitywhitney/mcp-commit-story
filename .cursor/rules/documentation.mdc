---
alwaysApply: false
---

# Documentation Standards

## Core Principle
**Write for a future developer with zero project knowledge who needs to understand and modify this system.**

## Possible Elements
- **Complete examples**: Copy-pasteable code snippets that work
- **Prerequisites**: What they need to install/know first
- **Clear steps**: How to use, modify, or extend
- **Technical context**: Why decisions were made when it affects future changes

## Forbidden Content
- **Process references**: No task IDs, sprint numbers, team workflows
- **Historical narrative**: Skip "we tried X then Y" stories
- **Assumed knowledge**: No insider team decisions or project history
- **Personal references**: No names, meetings, or timeline details

## Quality Test
**Could a new developer use this documentation successfully without asking questions?**

## Examples

### ✅ Good
```markdown
# Email Service

## Prerequisites
- Node.js 18+, environment vars: `SMTP_HOST`, `SMTP_USER`, `SMTP_PASS`

## Usage
```javascript
import { sendEmail } from './email-service';
await sendEmail('user@example.com', 'Welcome!', template);
```

## Configuration
- `TIMEOUT=10000`: 10s timeout prevents hanging on slow SMTP servers
```

### ❌ Bad
```markdown
# Email Service
After task #45, the team decided on nodemailer. Sarah's timeout fix solved our production issues.
```
